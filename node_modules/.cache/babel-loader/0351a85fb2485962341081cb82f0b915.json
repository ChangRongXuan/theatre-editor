{"ast":null,"code":"import { isTag, hasChildren } from \"domhandler\";\n/**\n * Get a node's children.\n *\n * @category Traversal\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */\nexport function getChildren(elem) {\n  return hasChildren(elem) ? elem.children : [];\n}\n/**\n * Get a node's parent.\n *\n * @category Traversal\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node, or `null` if `elem` is a root node.\n */\nexport function getParent(elem) {\n  return elem.parent || null;\n}\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first. If we don't\n * have a parent (the element is a root node), we walk the element's `prev` &\n * `next` to get all remaining nodes.\n *\n * @category Traversal\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings, including `elem`.\n */\nexport function getSiblings(elem) {\n  var parent = getParent(elem);\n  if (parent != null) return getChildren(parent);\n  var siblings = [elem];\n  var prev = elem.prev,\n    next = elem.next;\n  while (prev != null) {\n    siblings.unshift(prev);\n    var _prev = prev;\n    prev = _prev.prev;\n  }\n  while (next != null) {\n    siblings.push(next);\n    var _next = next;\n    next = _next.next;\n  }\n  return siblings;\n}\n/**\n * Gets an attribute from an element.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */\nexport function getAttributeValue(elem, name) {\n  var _a;\n  return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\n/**\n * Checks whether an element has an attribute.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */\nexport function hasAttrib(elem, name) {\n  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;\n}\n/**\n * Get the tag name of an element.\n *\n * @category Traversal\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */\nexport function getName(elem) {\n  return elem.name;\n}\n/**\n * Returns the next element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag, or `null` if there is no next\n * sibling.\n */\nexport function nextElementSibling(elem) {\n  var next = elem.next;\n  while (next !== null && !isTag(next)) {\n    var _next2 = next;\n    next = _next2.next;\n  }\n  return next;\n}\n/**\n * Returns the previous element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag, or `null` if there is no\n * previous sibling.\n */\nexport function prevElementSibling(elem) {\n  var prev = elem.prev;\n  while (prev !== null && !isTag(prev)) {\n    var _prev2 = prev;\n    prev = _prev2.prev;\n  }\n  return prev;\n}","map":{"version":3,"sources":["traversal.ts"],"names":[],"mappings":"AAAA,SACI,KAAK,EAKL,WAAW,QACR,YAAY;AAEnB;;;;;;AAMG;AACH,OAAM,SAAU,WAAW,CAAC,IAAa,EAAA;EACrC,OAAO,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,EAAE;AACjD;AAGA;;;;;;AAMG;AACH,OAAM,SAAU,SAAS,CAAC,IAAa,EAAA;EACnC,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI;AAC9B;AAEA;;;;;;;;;;AAUG;AACH,OAAM,SAAU,WAAW,CAAC,IAAa,EAAA;EACrC,IAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC;EAC9B,IAAI,MAAM,IAAI,IAAI,EAAE,OAAO,WAAW,CAAC,MAAM,CAAC;EAE9C,IAAM,QAAQ,GAAG,CAAC,IAAI,CAAC;EACvB,IAAM,IAAI,GAAW,IAAI,CAAnB,IAAI;IAAE,IAAI,GAAK,IAAI,CAAb,IAAI;EAChB,OAAO,IAAI,IAAI,IAAI,EAAE;IACjB,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;IAAC,IAAA,KAAA,GACX,IAAI;IAAb,IAAI,GAAA,KAAA,CAAJ,IAAI;EACV;EACD,OAAO,IAAI,IAAI,IAAI,EAAE;IACjB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IAAC,IAAA,KAAA,GACR,IAAI;IAAb,IAAI,GAAA,KAAA,CAAJ,IAAI;EACV;EACD,OAAO,QAAQ;AACnB;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,iBAAiB,CAC7B,IAAa,EACb,IAAY,EAAA;;EAEZ,OAAO,CAAA,EAAA,GAAA,IAAI,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,IAAI,CAAC;AAC/B;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,SAAS,CAAC,IAAa,EAAE,IAAY,EAAA;EACjD,OACI,IAAI,CAAC,OAAO,IAAI,IAAI,IACpB,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IACxD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI;AAElC;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,OAAO,CAAC,IAAa,EAAA;EACjC,OAAO,IAAI,CAAC,IAAI;AACpB;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,kBAAkB,CAAC,IAAa,EAAA;EAC5C,IAAM,IAAI,GAAK,IAAI,CAAb,IAAI;EACV,OAAO,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAAA,IAAA,MAAA,GAAc,IAAI;IAAb,IAAI,GAAA,MAAA,CAAJ,IAAI;EAAA;EAC7C,OAAO,IAAI;AACf;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,kBAAkB,CAAC,IAAa,EAAA;EAC5C,IAAM,IAAI,GAAK,IAAI,CAAb,IAAI;EACV,OAAO,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAAA,IAAA,MAAA,GAAc,IAAI;IAAb,IAAI,GAAA,MAAA,CAAJ,IAAI;EAAA;EAC7C,OAAO,IAAI;AACf","sourceRoot":"https://raw.githubusercontent.com/fb55/domutils/96c989e159c98218958f375ea04210f2d1b43c0c/src/","sourcesContent":["import { isTag, hasChildren, } from \"domhandler\";\n/**\n * Get a node's children.\n *\n * @category Traversal\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */\nexport function getChildren(elem) {\n    return hasChildren(elem) ? elem.children : [];\n}\n/**\n * Get a node's parent.\n *\n * @category Traversal\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node, or `null` if `elem` is a root node.\n */\nexport function getParent(elem) {\n    return elem.parent || null;\n}\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first. If we don't\n * have a parent (the element is a root node), we walk the element's `prev` &\n * `next` to get all remaining nodes.\n *\n * @category Traversal\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings, including `elem`.\n */\nexport function getSiblings(elem) {\n    const parent = getParent(elem);\n    if (parent != null)\n        return getChildren(parent);\n    const siblings = [elem];\n    let { prev, next } = elem;\n    while (prev != null) {\n        siblings.unshift(prev);\n        ({ prev } = prev);\n    }\n    while (next != null) {\n        siblings.push(next);\n        ({ next } = next);\n    }\n    return siblings;\n}\n/**\n * Gets an attribute from an element.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */\nexport function getAttributeValue(elem, name) {\n    var _a;\n    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\n/**\n * Checks whether an element has an attribute.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */\nexport function hasAttrib(elem, name) {\n    return (elem.attribs != null &&\n        Object.prototype.hasOwnProperty.call(elem.attribs, name) &&\n        elem.attribs[name] != null);\n}\n/**\n * Get the tag name of an element.\n *\n * @category Traversal\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */\nexport function getName(elem) {\n    return elem.name;\n}\n/**\n * Returns the next element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag, or `null` if there is no next\n * sibling.\n */\nexport function nextElementSibling(elem) {\n    let { next } = elem;\n    while (next !== null && !isTag(next))\n        ({ next } = next);\n    return next;\n}\n/**\n * Returns the previous element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag, or `null` if there is no\n * previous sibling.\n */\nexport function prevElementSibling(elem) {\n    let { prev } = elem;\n    while (prev !== null && !isTag(prev))\n        ({ prev } = prev);\n    return prev;\n}\n//# sourceMappingURL=traversal.js.map"]},"metadata":{},"sourceType":"module"}