{"ast":null,"code":"import Matter from 'matter-js';\nimport styled from '../styled-components.js';\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  Bodies,\n  Body,\n  Common,\n  Composite,\n  Engine\n} = Matter;\nconst Block = styled.div`\n  /* font-family set here is for better performance. */\n  /* If the webpage uses other font-family, such as adobe fonts, google fonts */\n  /* and the dropping effect will be slow and laggy. */\n  font-family: sans-serif;\n\n  line-height: 1;\n\n  position: relative;\n  font-size: 20px;\n  overflow: hidden;\n  & > img.loading {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  ${\n/**\n*  @param {Object} props\n*  @param {boolean} porps.initialRender\n*/_ref => {\n  let {\n    initialRender\n  } = _ref;\n  if (initialRender) {\n    return `\n        & > span {\n          position: static;\n          line-height: 20px;\n        }\n\n        @media (max-width: 767px) {\n          & > span {\n            font-size: 12px;\n            line-height: 12px;\n          }\n        }\n      `;\n  }\n  return `\n      & > span {\n        position: absolute;\n        line-height: 1.2;\n      }\n      @media (max-width: 767px) {\n        & > span {\n          font-size: 12px;\n          line-height: 1.5;\n        }\n      }\n    `;\n}}\n`;\nconst Text = styled.span`\n  font-size: 20px;\n  user-select: none;\n  visibility: hidden;\n`;\nfunction findOverflowIdx(nodeList, overflowThreshold) {\n  for (let i = nodeList.length - 1; i >= 0; i--) {\n    const node = nodeList[i];\n    if (node.offsetTop < overflowThreshold) {\n      return i + 1;\n    }\n  }\n  return nodeList.length;\n}\n/**\n *  @typedef {Object} DroppingTextProps\n *  @property {string[]} textArr\n *  @property {number} [canvasWidth] - if not provided, then default value will be `window.innerWidth`\n *  @property {number} [canvasHeight] - if not provided, then default value will be `window.innerHeight`\n *  @property {boolean} showLoadingImg=true]\n *  @property {string} [loadingImgSrc='https://unpkg.com/@readr-media/react-dropping-text/assets/loading.gif']\n */\n\n/**\n *  @param {DroppingTextProps} props\n *  @returns {React.ReactElement}\n */\n\nexport default function DroppingText(_ref2) {\n  let {\n    textArr,\n    canvasWidth,\n    canvasHeight,\n    showLoadingImg = true,\n    loadingImgSrc = 'https://unpkg.com/@readr-media/react-dropping-text/assets/loading.gif'\n  } = _ref2;\n  const defaultOverflowIdx = textArr.length + 1; // `overflowIdx` is used to truncate `textArr` if `textArr` items are\n  // over the `DroppingText` canvas.\n\n  const [overflowIdx, setOverflowIdx] = useState(defaultOverflowIdx);\n  const [objsForRequestAnimationFrame, setObjsForRaf] = useState(null);\n  const [height, setHeight] = useState(canvasHeight ?? '100vh');\n  const [inViewRef, inView] = useInView();\n  const blockRef = useRef();\n  const truncatedTextArr = textArr.slice(0, overflowIdx);\n  const initialRender = overflowIdx === defaultOverflowIdx; // Use `useCallback` so we don't recreate the function on each render\n\n  const setRefs = useCallback(node => {\n    // Ref's from useRef needs to have the node assigned to `current`\n    blockRef.current = node; // Callback refs, like the one from `useInView`, is a function that takes the node as an argument\n\n    inViewRef(node);\n  }, [inViewRef]); // This a workaround to solve in-app rendering issue.\n  // If we use iOS in-app browser to render 100vh block,\n  // and the in-app browser will change block's height\n  // while scrolling down/up.\n  //\n  // Therefore, we use state to store the block's height\n  // rather than setting `100vh`.\n\n  useEffect(() => {\n    if (blockRef.current) {\n      const block = blockRef.current;\n      const height = block === null || block === void 0 ? void 0 : block.clientHeight;\n      if (height) {\n        setHeight(height);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    const droppingTextNodes = document.querySelectorAll('[data-dropping-text=true]');\n    const _canvasWidth = canvasWidth ?? window.innerWidth;\n    const _canvasHeight = canvasHeight ?? window.innerHeight;\n    if (initialRender) {\n      // If `textArr` has too many items, and then the items may fill up the screen,\n      // or even overflow the screen.\n      // For better perforance, we could truncate those overflowed items.\n      // `findOverflowIdx` is to find the index of an item which overflows the screen.\n      const idx = findOverflowIdx(droppingTextNodes, _canvasHeight); // intentionally to render loading image\n\n      if (showLoadingImg) {\n        setTimeout(() => {\n          setOverflowIdx(idx);\n        }, 1000);\n      } else {\n        setOverflowIdx(idx);\n      }\n      return;\n    }\n    const wallWidth = 60; // px\n\n    const droppingDistanceInterval = 100; // px\n\n    const engine = Engine.create(); // adjust animation speed\n\n    engine.timing.timeScale = 1.2;\n    const textRectangles = [];\n    for (let i = 0; i < droppingTextNodes.length; i++) {\n      // dropping text node\n      const dtn = droppingTextNodes[i];\n      const blockWidth = dtn === null || dtn === void 0 ? void 0 : dtn.clientWidth;\n      const blockHeight = dtn.clientHeight; // random x for initial position of dropping texts\n\n      const randomX = Common.random(wallWidth, _canvasWidth - wallWidth); // the smaller value, the later dropping\n\n      const y = 0 - i * droppingDistanceInterval; // create the rectangle for the certain dropping text\n\n      const rectangle = Bodies.rectangle(randomX, y, blockWidth, blockHeight); // random rotate degree of the dropping rectangle\n\n      const randomDegree = Common.random(-60, 60);\n      const radian = randomDegree * Math.PI / 180; // rotate the rectangle\n\n      Body.setAngle(rectangle, radian);\n      const textRectangle = {\n        w: blockWidth,\n        h: blockHeight,\n        matterBody: rectangle,\n        domElement: dtn,\n        render() {\n          const {\n            x,\n            y\n          } = this.matterBody.position;\n          if (x > _canvasWidth || x < 0) {\n            return;\n          }\n          if (y > _canvasHeight) {\n            return;\n          }\n          const _y = `${y - this.h / 2}px`;\n          const _x = `${x - this.w / 2}px`; // @ts-ignore\n\n          this.domElement.style.transform = `translate(${_x}, ${_y}) rotate(${this.matterBody.angle}rad)`; // @ts-ignore\n\n          this.domElement.style.visibility = 'visible';\n        }\n      };\n      textRectangles.push(textRectangle);\n    } // Add text rectangles into world\n\n    Composite.add(engine.world, textRectangles.map(tr => tr.matterBody));\n    const walls = [\n    // ground\n    Bodies.rectangle(_canvasWidth / 2,\n    // x position\n    _canvasHeight,\n    // y position\n    _canvasWidth,\n    // ground width\n    wallWidth,\n    // ground height\n    {\n      isStatic: true\n    }),\n    // static in the engine world, which means it won't move\n    // left wall\n    Bodies.rectangle(0,\n    // x position\n    _canvasHeight / 2,\n    // y position\n    wallWidth,\n    // wall width\n    _canvasHeight,\n    // wall height\n    {\n      isStatic: true\n    }),\n    // right wall\n    Bodies.rectangle(_canvasWidth,\n    // x position\n    _canvasHeight / 2,\n    // y position\n    wallWidth,\n    // wall width\n    _canvasHeight,\n    // wall height\n    {\n      isStatic: true\n    })]; // Add walls into world\n\n    Composite.add(engine.world, walls);\n    setObjsForRaf({\n      matterEngine: engine,\n      textRectangles\n    });\n  }, [overflowIdx]);\n  useEffect(() => {\n    if (objsForRequestAnimationFrame === null) {\n      return;\n    }\n    const {\n      matterEngine,\n      textRectangles\n    } = objsForRequestAnimationFrame;\n    let raf;\n    if (inView) {\n      const rerender = () => {\n        // update dropping text css\n        textRectangles.forEach(tr => {\n          tr.render();\n        });\n        Engine.update(matterEngine);\n        raf = requestAnimationFrame(rerender);\n      };\n      raf = requestAnimationFrame(rerender);\n    }\n    return () => {\n      cancelAnimationFrame(raf);\n    };\n  }, [objsForRequestAnimationFrame, inView]);\n  const jsx = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [showLoadingImg && initialRender && /*#__PURE__*/_jsx(\"img\", {\n      className: \"loading\",\n      src: loadingImgSrc\n    }), truncatedTextArr.map((txt, idx) => {\n      return /*#__PURE__*/_jsx(Text, {\n        \"data-dropping-text\": true,\n        dangerouslySetInnerHTML: {\n          __html: txt\n        }\n      }, idx);\n    })]\n  });\n  return /*#__PURE__*/_jsx(Block, {\n    style: {\n      width: typeof canvasWidth === 'number' ? `${canvasWidth}px` : '100vw',\n      height\n    },\n    ref: setRefs\n    /**\n     * For better performance,\n     * we separate rendering logics to two steps.\n     * First step, also called initial render,\n     * is to render `visibility: hidden` texts.\n     * These hidden texts are used to calculate `overflowIdx` state.\n     *\n     * After `overflowIdx` state changed,\n     * we rerender the truncated texts,\n     * and start to run matter engine to\n     * drop the texts.\n     */,\n\n    initialRender: initialRender,\n    children: jsx\n  });\n}","map":{"version":3,"names":["Matter","styled","useCallback","useEffect","useState","useRef","useInView","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Bodies","Body","Common","Composite","Engine","Block","div","_ref","initialRender","Text","span","findOverflowIdx","nodeList","overflowThreshold","i","length","node","offsetTop","DroppingText","_ref2","textArr","canvasWidth","canvasHeight","showLoadingImg","loadingImgSrc","defaultOverflowIdx","overflowIdx","setOverflowIdx","objsForRequestAnimationFrame","setObjsForRaf","height","setHeight","inViewRef","inView","blockRef","truncatedTextArr","slice","setRefs","current","block","clientHeight","droppingTextNodes","document","querySelectorAll","_canvasWidth","window","innerWidth","_canvasHeight","innerHeight","idx","setTimeout","wallWidth","droppingDistanceInterval","engine","create","timing","timeScale","textRectangles","dtn","blockWidth","clientWidth","blockHeight","randomX","random","y","rectangle","randomDegree","radian","Math","PI","setAngle","textRectangle","w","h","matterBody","domElement","render","x","position","_y","_x","style","transform","angle","visibility","push","add","world","map","tr","walls","isStatic","matterEngine","raf","rerender","forEach","update","requestAnimationFrame","cancelAnimationFrame","children","className","src","txt","dangerouslySetInnerHTML","__html","width","ref"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/node_modules/@readr-media/react-dropping-text/lib/esm/react-components/index.js"],"sourcesContent":["import Matter from 'matter-js';\nimport styled from '../styled-components.js';\nimport { useCallback, useEffect, useState, useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  Bodies,\n  Body,\n  Common,\n  Composite,\n  Engine\n} = Matter;\nconst Block = styled.div`\n  /* font-family set here is for better performance. */\n  /* If the webpage uses other font-family, such as adobe fonts, google fonts */\n  /* and the dropping effect will be slow and laggy. */\n  font-family: sans-serif;\n\n  line-height: 1;\n\n  position: relative;\n  font-size: 20px;\n  overflow: hidden;\n  & > img.loading {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  ${\n/**\n*  @param {Object} props\n*  @param {boolean} porps.initialRender\n*/\n({\n  initialRender\n}) => {\n  if (initialRender) {\n    return `\n        & > span {\n          position: static;\n          line-height: 20px;\n        }\n\n        @media (max-width: 767px) {\n          & > span {\n            font-size: 12px;\n            line-height: 12px;\n          }\n        }\n      `;\n  }\n\n  return `\n      & > span {\n        position: absolute;\n        line-height: 1.2;\n      }\n      @media (max-width: 767px) {\n        & > span {\n          font-size: 12px;\n          line-height: 1.5;\n        }\n      }\n    `;\n}}\n`;\nconst Text = styled.span`\n  font-size: 20px;\n  user-select: none;\n  visibility: hidden;\n`;\n\nfunction findOverflowIdx(nodeList, overflowThreshold) {\n  for (let i = nodeList.length - 1; i >= 0; i--) {\n    const node = nodeList[i];\n\n    if (node.offsetTop < overflowThreshold) {\n      return i + 1;\n    }\n  }\n\n  return nodeList.length;\n}\n/**\n *  @typedef {Object} DroppingTextProps\n *  @property {string[]} textArr\n *  @property {number} [canvasWidth] - if not provided, then default value will be `window.innerWidth`\n *  @property {number} [canvasHeight] - if not provided, then default value will be `window.innerHeight`\n *  @property {boolean} showLoadingImg=true]\n *  @property {string} [loadingImgSrc='https://unpkg.com/@readr-media/react-dropping-text/assets/loading.gif']\n */\n\n/**\n *  @param {DroppingTextProps} props\n *  @returns {React.ReactElement}\n */\n\n\nexport default function DroppingText({\n  textArr,\n  canvasWidth,\n  canvasHeight,\n  showLoadingImg = true,\n  loadingImgSrc = 'https://unpkg.com/@readr-media/react-dropping-text/assets/loading.gif'\n}) {\n  const defaultOverflowIdx = textArr.length + 1; // `overflowIdx` is used to truncate `textArr` if `textArr` items are\n  // over the `DroppingText` canvas.\n\n  const [overflowIdx, setOverflowIdx] = useState(defaultOverflowIdx);\n  const [objsForRequestAnimationFrame, setObjsForRaf] = useState(null);\n  const [height, setHeight] = useState(canvasHeight ?? '100vh');\n  const [inViewRef, inView] = useInView();\n  const blockRef = useRef();\n  const truncatedTextArr = textArr.slice(0, overflowIdx);\n  const initialRender = overflowIdx === defaultOverflowIdx; // Use `useCallback` so we don't recreate the function on each render\n\n  const setRefs = useCallback(node => {\n    // Ref's from useRef needs to have the node assigned to `current`\n    blockRef.current = node; // Callback refs, like the one from `useInView`, is a function that takes the node as an argument\n\n    inViewRef(node);\n  }, [inViewRef]); // This a workaround to solve in-app rendering issue.\n  // If we use iOS in-app browser to render 100vh block,\n  // and the in-app browser will change block's height\n  // while scrolling down/up.\n  //\n  // Therefore, we use state to store the block's height\n  // rather than setting `100vh`.\n\n  useEffect(() => {\n    if (blockRef.current) {\n      const block = blockRef.current;\n      const height = block === null || block === void 0 ? void 0 : block.clientHeight;\n\n      if (height) {\n        setHeight(height);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    const droppingTextNodes = document.querySelectorAll('[data-dropping-text=true]');\n\n    const _canvasWidth = canvasWidth ?? window.innerWidth;\n\n    const _canvasHeight = canvasHeight ?? window.innerHeight;\n\n    if (initialRender) {\n      // If `textArr` has too many items, and then the items may fill up the screen,\n      // or even overflow the screen.\n      // For better perforance, we could truncate those overflowed items.\n      // `findOverflowIdx` is to find the index of an item which overflows the screen.\n      const idx = findOverflowIdx(droppingTextNodes, _canvasHeight); // intentionally to render loading image\n\n      if (showLoadingImg) {\n        setTimeout(() => {\n          setOverflowIdx(idx);\n        }, 1000);\n      } else {\n        setOverflowIdx(idx);\n      }\n\n      return;\n    }\n\n    const wallWidth = 60; // px\n\n    const droppingDistanceInterval = 100; // px\n\n    const engine = Engine.create(); // adjust animation speed\n\n    engine.timing.timeScale = 1.2;\n    const textRectangles = [];\n\n    for (let i = 0; i < droppingTextNodes.length; i++) {\n      // dropping text node\n      const dtn = droppingTextNodes[i];\n      const blockWidth = dtn === null || dtn === void 0 ? void 0 : dtn.clientWidth;\n      const blockHeight = dtn.clientHeight; // random x for initial position of dropping texts\n\n      const randomX = Common.random(wallWidth, _canvasWidth - wallWidth); // the smaller value, the later dropping\n\n      const y = 0 - i * droppingDistanceInterval; // create the rectangle for the certain dropping text\n\n      const rectangle = Bodies.rectangle(randomX, y, blockWidth, blockHeight); // random rotate degree of the dropping rectangle\n\n      const randomDegree = Common.random(-60, 60);\n      const radian = randomDegree * Math.PI / 180; // rotate the rectangle\n\n      Body.setAngle(rectangle, radian);\n      const textRectangle = {\n        w: blockWidth,\n        h: blockHeight,\n        matterBody: rectangle,\n        domElement: dtn,\n\n        render() {\n          const {\n            x,\n            y\n          } = this.matterBody.position;\n\n          if (x > _canvasWidth || x < 0) {\n            return;\n          }\n\n          if (y > _canvasHeight) {\n            return;\n          }\n\n          const _y = `${y - this.h / 2}px`;\n          const _x = `${x - this.w / 2}px`; // @ts-ignore\n\n          this.domElement.style.transform = `translate(${_x}, ${_y}) rotate(${this.matterBody.angle}rad)`; // @ts-ignore\n\n          this.domElement.style.visibility = 'visible';\n        }\n\n      };\n      textRectangles.push(textRectangle);\n    } // Add text rectangles into world\n\n\n    Composite.add(engine.world, textRectangles.map(tr => tr.matterBody));\n    const walls = [// ground\n    Bodies.rectangle(_canvasWidth / 2, // x position\n    _canvasHeight, // y position\n    _canvasWidth, // ground width\n    wallWidth, // ground height\n    {\n      isStatic: true\n    }), // static in the engine world, which means it won't move\n    // left wall\n    Bodies.rectangle(0, // x position\n    _canvasHeight / 2, // y position\n    wallWidth, // wall width\n    _canvasHeight, // wall height\n    {\n      isStatic: true\n    }), // right wall\n    Bodies.rectangle(_canvasWidth, // x position\n    _canvasHeight / 2, // y position\n    wallWidth, // wall width\n    _canvasHeight, // wall height\n    {\n      isStatic: true\n    })]; // Add walls into world\n\n    Composite.add(engine.world, walls);\n    setObjsForRaf({\n      matterEngine: engine,\n      textRectangles\n    });\n  }, [overflowIdx]);\n  useEffect(() => {\n    if (objsForRequestAnimationFrame === null) {\n      return;\n    }\n\n    const {\n      matterEngine,\n      textRectangles\n    } = objsForRequestAnimationFrame;\n    let raf;\n\n    if (inView) {\n      const rerender = () => {\n        // update dropping text css\n        textRectangles.forEach(tr => {\n          tr.render();\n        });\n        Engine.update(matterEngine);\n        raf = requestAnimationFrame(rerender);\n      };\n\n      raf = requestAnimationFrame(rerender);\n    }\n\n    return () => {\n      cancelAnimationFrame(raf);\n    };\n  }, [objsForRequestAnimationFrame, inView]);\n\n  const jsx = /*#__PURE__*/_jsxs(_Fragment, {\n    children: [showLoadingImg && initialRender && /*#__PURE__*/_jsx(\"img\", {\n      className: \"loading\",\n      src: loadingImgSrc\n    }), truncatedTextArr.map((txt, idx) => {\n      return /*#__PURE__*/_jsx(Text, {\n        \"data-dropping-text\": true,\n        dangerouslySetInnerHTML: {\n          __html: txt\n        }\n      }, idx);\n    })]\n  });\n\n  return /*#__PURE__*/_jsx(Block, {\n    style: {\n      width: typeof canvasWidth === 'number' ? `${canvasWidth}px` : '100vw',\n      height\n    },\n    ref: setRefs\n    /**\n     * For better performance,\n     * we separate rendering logics to two steps.\n     * First step, also called initial render,\n     * is to render `visibility: hidden` texts.\n     * These hidden texts are used to calculate `overflowIdx` state.\n     *\n     * After `overflowIdx` state changed,\n     * we rerender the truncated texts,\n     * and start to run matter engine to\n     * drop the texts.\n     */\n    ,\n    initialRender: initialRender,\n    children: jsx\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}