{"ast":null,"code":"var _s = $RefreshSig$();\n/* global ScrollTrigger, gsap */\nimport { useEffect, useRef } from 'react';\nimport useCDN from './use-cdn';\n\n/*\n * @returns {string} current `window.location.href` without hash\n */\nfunction getHrefWithoutHash() {\n  return window.location.href.replace(window.location.hash, '');\n}\n\n/**\n *\n *\n * @param {number} [timeout=700] polling timeout (ms)\n */\nfunction startPollingDocumentHeight() {\n  let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 700;\n  // Start polling only on client side\n  if (typeof window === 'undefined') return;\n  // Run only single polling at one page\n  if (window._isScrollableVideoPollingActive) return;\n  // Only start polling when timeout is set\n  if (!timeout) return;\n  // Use closures to save data\n  let lastHeight;\n  let timer;\n  const startPollingLocation = getHrefWithoutHash();\n  const check = () => {\n    // Stop polling if:\n    // 1. No ScrollTrigger in this page\n    // 2. No ScrollTrigger instances in this page\n    if (typeof ScrollTrigger === 'undefined' || !ScrollTrigger.getAll().length) {\n      window._isScrollableVideoPollingActive = false;\n      return;\n    }\n    // 3. The location has been changed from where it start polling\n    if (startPollingLocation !== getHrefWithoutHash()) {\n      // kill all ScrollTrigger instances\n      try {\n        ScrollTrigger.getAll().forEach(instance => instance.kill());\n      } catch (error) {\n        console.error('failed to kill ScrollTrigger instances:', error);\n      }\n      window._isScrollableVideoPollingActive = false;\n      return;\n    }\n\n    // Refresh all ScrollTrigger instances if body height changed\n    const currentHeight = document.body.clientHeight;\n    if (currentHeight !== lastHeight) {\n      lastHeight = currentHeight;\n      ScrollTrigger.refresh();\n    }\n\n    // Set next polling action\n    window._isScrollableVideoPollingActive = true;\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n    timer = window.setTimeout(check, timeout);\n  };\n  check();\n}\nexport default function useScrollTrigger(_ref) {\n  _s();\n  let {\n    duration,\n    gsapVersion,\n    pollingTimeout,\n    scrollTriggerVersion,\n    sectionEle,\n    videoRef,\n    videoSizerEle,\n    onCreatingScrollTriggerError\n  } = _ref;\n  const gsapCDNSrc = `https://cdnjs.cloudflare.com/ajax/libs/gsap/${gsapVersion}/gsap.min.js`;\n  const scrollTriggerCDNSrc = `https://cdnjs.cloudflare.com/ajax/libs/gsap/${scrollTriggerVersion}/ScrollTrigger.min.js`;\n  const isGsapLoaded = useCDN(gsapCDNSrc, () => typeof gsap !== 'undefined');\n  const isScrollTriggerLoaded = useCDN(scrollTriggerCDNSrc, () => typeof ScrollTrigger !== 'undefined');\n  const latestScrollTriggerRef = useRef(null);\n  useEffect(() => {\n    if (isGsapLoaded && isScrollTriggerLoaded && videoRef && videoRef.current && videoSizerEle && sectionEle && duration) {\n      let scrollProgress;\n      let playing = false;\n      const start = 0;\n      const end = duration - 0.05; // -0.05 to prevent playing last frame, which may cause video stop and be blank\n      const syncVideoWithScroll = () => {\n        if (playing && !videoRef.current.seeking) {\n          const time = (scrollProgress * duration).toFixed(2);\n          const targetTime = time > end ? end : time;\n          if (targetTime !== videoRef.current.currentTime) {\n            videoRef.current.currentTime = targetTime;\n          }\n        }\n        window.requestAnimationFrame(syncVideoWithScroll);\n      };\n      const scrollTriggerOptions = {\n        trigger: sectionEle,\n        start: 'top top',\n        end: 'bottom top',\n        pin: videoSizerEle,\n        onEnter: () => {\n          playing = true;\n          window.requestAnimationFrame(syncVideoWithScroll);\n        },\n        onEnterBack: () => {\n          playing = true;\n          window.requestAnimationFrame(syncVideoWithScroll);\n        },\n        onLeave: () => {\n          playing = false;\n          if (videoRef.current.currentTime !== end) {\n            videoRef.current.currentTime = end;\n          }\n        },\n        onLeaveBack: () => {\n          playing = false;\n          if (videoRef.current.currentTime !== start) {\n            videoRef.current.currentTime = start;\n          }\n        },\n        onUpdate: _ref2 => {\n          let {\n            progress\n          } = _ref2;\n          scrollProgress = progress;\n        }\n      };\n      let scrollTriggerInstance;\n      try {\n        gsap.registerPlugin(ScrollTrigger);\n        scrollTriggerInstance = ScrollTrigger.create(scrollTriggerOptions);\n        latestScrollTriggerRef.current = scrollTriggerInstance;\n      } catch (error) {\n        console.error('creating ScrollTrigger error:', error);\n        onCreatingScrollTriggerError(error);\n      }\n      startPollingDocumentHeight(pollingTimeout);\n      return () => {\n        if (scrollTriggerInstance) {\n          scrollTriggerInstance.kill();\n        }\n      };\n    }\n  }, [duration, isGsapLoaded, isScrollTriggerLoaded, pollingTimeout, sectionEle, videoRef, videoSizerEle, onCreatingScrollTriggerError]);\n  return latestScrollTriggerRef;\n}\n_s(useScrollTrigger, \"VRHy/cLkB7KAvm/XyGS6Z/N8+2s=\", false, function () {\n  return [useCDN, useCDN];\n});","map":{"version":3,"names":["useEffect","useRef","useCDN","getHrefWithoutHash","window","location","href","replace","hash","startPollingDocumentHeight","timeout","arguments","length","undefined","_isScrollableVideoPollingActive","lastHeight","timer","startPollingLocation","check","ScrollTrigger","getAll","forEach","instance","kill","error","console","currentHeight","document","body","clientHeight","refresh","clearTimeout","setTimeout","useScrollTrigger","_ref","_s","duration","gsapVersion","pollingTimeout","scrollTriggerVersion","sectionEle","videoRef","videoSizerEle","onCreatingScrollTriggerError","gsapCDNSrc","scrollTriggerCDNSrc","isGsapLoaded","gsap","isScrollTriggerLoaded","latestScrollTriggerRef","current","scrollProgress","playing","start","end","syncVideoWithScroll","seeking","time","toFixed","targetTime","currentTime","requestAnimationFrame","scrollTriggerOptions","trigger","pin","onEnter","onEnterBack","onLeave","onLeaveBack","onUpdate","_ref2","progress","scrollTriggerInstance","registerPlugin","create"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/hook/useScrollTrigger.js"],"sourcesContent":["/* global ScrollTrigger, gsap */\nimport { useEffect, useRef } from 'react';\nimport useCDN from './use-cdn';\n\n/*\n * @returns {string} current `window.location.href` without hash\n */\nfunction getHrefWithoutHash() {\n  return window.location.href.replace(window.location.hash, '');\n}\n\n/**\n *\n *\n * @param {number} [timeout=700] polling timeout (ms)\n */\nfunction startPollingDocumentHeight(timeout = 700) {\n  // Start polling only on client side\n  if (typeof window === 'undefined') return;\n  // Run only single polling at one page\n  if (window._isScrollableVideoPollingActive) return;\n  // Only start polling when timeout is set\n  if (!timeout) return;\n  // Use closures to save data\n  let lastHeight;\n  let timer;\n  const startPollingLocation = getHrefWithoutHash();\n  const check = () => {\n    // Stop polling if:\n    // 1. No ScrollTrigger in this page\n    // 2. No ScrollTrigger instances in this page\n    if (\n      typeof ScrollTrigger === 'undefined' ||\n      !ScrollTrigger.getAll().length\n    ) {\n      window._isScrollableVideoPollingActive = false;\n      return;\n    }\n    // 3. The location has been changed from where it start polling\n    if (startPollingLocation !== getHrefWithoutHash()) {\n      // kill all ScrollTrigger instances\n      try {\n        ScrollTrigger.getAll().forEach((instance) => instance.kill());\n      } catch (error) {\n        console.error('failed to kill ScrollTrigger instances:', error);\n      }\n      window._isScrollableVideoPollingActive = false;\n      return;\n    }\n\n    // Refresh all ScrollTrigger instances if body height changed\n    const currentHeight = document.body.clientHeight;\n    if (currentHeight !== lastHeight) {\n      lastHeight = currentHeight;\n      ScrollTrigger.refresh();\n    }\n\n    // Set next polling action\n    window._isScrollableVideoPollingActive = true;\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n    timer = window.setTimeout(check, timeout);\n  };\n  check();\n}\n\nexport default function useScrollTrigger({\n  duration,\n  gsapVersion,\n  pollingTimeout,\n  scrollTriggerVersion,\n  sectionEle,\n  videoRef,\n  videoSizerEle,\n  onCreatingScrollTriggerError,\n}) {\n  const gsapCDNSrc = `https://cdnjs.cloudflare.com/ajax/libs/gsap/${gsapVersion}/gsap.min.js`;\n  const scrollTriggerCDNSrc = `https://cdnjs.cloudflare.com/ajax/libs/gsap/${scrollTriggerVersion}/ScrollTrigger.min.js`;\n  const isGsapLoaded = useCDN(gsapCDNSrc, () => typeof gsap !== 'undefined');\n  const isScrollTriggerLoaded = useCDN(\n    scrollTriggerCDNSrc,\n    () => typeof ScrollTrigger !== 'undefined'\n  );\n  const latestScrollTriggerRef = useRef(null);\n  useEffect(() => {\n    if (\n      isGsapLoaded &&\n      isScrollTriggerLoaded &&\n      videoRef &&\n      videoRef.current &&\n      videoSizerEle &&\n      sectionEle &&\n      duration\n    ) {\n      let scrollProgress;\n      let playing = false;\n      const start = 0;\n      const end = duration - 0.05; // -0.05 to prevent playing last frame, which may cause video stop and be blank\n      const syncVideoWithScroll = () => {\n        if (playing && !videoRef.current.seeking) {\n          const time = (scrollProgress * duration).toFixed(2);\n          const targetTime = time > end ? end : time;\n          if (targetTime !== videoRef.current.currentTime) {\n            videoRef.current.currentTime = targetTime;\n          }\n        }\n        window.requestAnimationFrame(syncVideoWithScroll);\n      };\n      const scrollTriggerOptions = {\n        trigger: sectionEle,\n        start: 'top top',\n        end: 'bottom top',\n        pin: videoSizerEle,\n        onEnter: () => {\n          playing = true;\n          window.requestAnimationFrame(syncVideoWithScroll);\n        },\n        onEnterBack: () => {\n          playing = true;\n          window.requestAnimationFrame(syncVideoWithScroll);\n        },\n        onLeave: () => {\n          playing = false;\n          if (videoRef.current.currentTime !== end) {\n            videoRef.current.currentTime = end;\n          }\n        },\n        onLeaveBack: () => {\n          playing = false;\n          if (videoRef.current.currentTime !== start) {\n            videoRef.current.currentTime = start;\n          }\n        },\n        onUpdate: ({ progress }) => {\n          scrollProgress = progress;\n        },\n      };\n      let scrollTriggerInstance;\n      try {\n        gsap.registerPlugin(ScrollTrigger);\n        scrollTriggerInstance = ScrollTrigger.create(scrollTriggerOptions);\n        latestScrollTriggerRef.current = scrollTriggerInstance;\n      } catch (error) {\n        console.error('creating ScrollTrigger error:', error);\n        onCreatingScrollTriggerError(error);\n      }\n      startPollingDocumentHeight(pollingTimeout);\n      return () => {\n        if (scrollTriggerInstance) {\n          scrollTriggerInstance.kill();\n        }\n      };\n    }\n  }, [\n    duration,\n    isGsapLoaded,\n    isScrollTriggerLoaded,\n    pollingTimeout,\n    sectionEle,\n    videoRef,\n    videoSizerEle,\n    onCreatingScrollTriggerError,\n  ]);\n  return latestScrollTriggerRef;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}