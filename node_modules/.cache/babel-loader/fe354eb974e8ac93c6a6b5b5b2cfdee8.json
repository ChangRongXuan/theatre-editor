{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/page/playground.js\",\n  _s = $RefreshSig$();\nimport studio from '@theatre/studio';\nimport { useState, useEffect } from 'react';\nimport Stage from '../components/stage';\nimport EditPanel from '../components/edit-panel';\nimport { getProject } from '@theatre/core';\nimport { renderFontObject, renderImageObject, renderBgObject } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Playground() {\n  _s();\n  studio.initialize();\n  studio.ui.restore();\n  const project = getProject('Project', {});\n  const sheet = project.sheet('Scene', 'default');\n  project.ready.then(() => sheet.sequence.pause());\n\n  // ---------------------------\n\n  const elementJson = localStorage.getItem('theatre-data');\n  const elementData = elementJson ? JSON.parse(elementJson) : [];\n  const [storedData, setStoredData] = useState([]);\n  useEffect(() => {\n    const elements = localStorage.getItem('theatre-data');\n    if (elements) {\n      setStoredData(JSON.parse(elements));\n    }\n  }, []);\n  useEffect(() => {\n    if (storedData.length > 0) {\n      renderFontObject(storedData, sheet);\n      renderImageObject(storedData, sheet);\n      renderBgObject(storedData, sheet);\n    }\n  }, [storedData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EditPanel, {\n      sheet: sheet,\n      setStoredData: setStoredData,\n      storedData: storedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      storedData: storedData,\n      sheet: sheet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Playground, \"3BWFAgJBhjvuMRyDP6l5VsmCKIE=\");\n_c = Playground;\nvar _c;\n$RefreshReg$(_c, \"Playground\");","map":{"version":3,"names":["studio","useState","useEffect","Stage","EditPanel","getProject","renderFontObject","renderImageObject","renderBgObject","jsxDEV","_jsxDEV","Fragment","_Fragment","Playground","_s","initialize","ui","restore","project","sheet","ready","then","sequence","pause","elementJson","localStorage","getItem","elementData","JSON","parse","storedData","setStoredData","elements","length","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/page/playground.js"],"sourcesContent":["import studio from '@theatre/studio';\nimport { useState, useEffect } from 'react';\nimport Stage from '../components/stage';\nimport EditPanel from '../components/edit-panel';\nimport { getProject } from '@theatre/core';\nimport { renderFontObject, renderImageObject, renderBgObject } from '../utils';\n\nexport default function Playground() {\n  studio.initialize();\n  studio.ui.restore();\n  const project = getProject('Project', {});\n  const sheet = project.sheet('Scene', 'default');\n  project.ready.then(() => sheet.sequence.pause());\n\n  // ---------------------------\n\n  const elementJson = localStorage.getItem('theatre-data');\n\n  const elementData = elementJson ? JSON.parse(elementJson) : [];\n\n  const [storedData, setStoredData] = useState([]);\n\n  useEffect(() => {\n    const elements = localStorage.getItem('theatre-data');\n    if (elements) {\n      setStoredData(JSON.parse(elements));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedData.length > 0) {\n      renderFontObject(storedData, sheet);\n      renderImageObject(storedData, sheet);\n      renderBgObject(storedData, sheet);\n    }\n  }, [storedData]);\n\n  return (\n    <>\n      <EditPanel\n        sheet={sheet}\n        setStoredData={setStoredData}\n        storedData={storedData}\n      />\n      <Stage storedData={storedData} sheet={sheet} />\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,iBAAiB;AACpC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,SAAS,MAAM,0BAA0B;AAChD,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,cAAc,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/E,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnCd,MAAM,CAACe,UAAU,CAAC,CAAC;EACnBf,MAAM,CAACgB,EAAE,CAACC,OAAO,CAAC,CAAC;EACnB,MAAMC,OAAO,GAAGb,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;EACzC,MAAMc,KAAK,GAAGD,OAAO,CAACC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC;EAC/CD,OAAO,CAACE,KAAK,CAACC,IAAI,CAAC,MAAMF,KAAK,CAACG,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;;EAEhD;;EAEA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAExD,MAAMC,WAAW,GAAGH,WAAW,GAAGI,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,GAAG,EAAE;EAE9D,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAM8B,QAAQ,GAAGP,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACrD,IAAIM,QAAQ,EAAE;MACZD,aAAa,CAACH,IAAI,CAACC,KAAK,CAACG,QAAQ,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN9B,SAAS,CAAC,MAAM;IACd,IAAI4B,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;MACzB3B,gBAAgB,CAACwB,UAAU,EAAEX,KAAK,CAAC;MACnCZ,iBAAiB,CAACuB,UAAU,EAAEX,KAAK,CAAC;MACpCX,cAAc,CAACsB,UAAU,EAAEX,KAAK,CAAC;IACnC;EACF,CAAC,EAAE,CAACW,UAAU,CAAC,CAAC;EAEhB,oBACEpB,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBACExB,OAAA,CAACN,SAAS;MACRe,KAAK,EAAEA,KAAM;MACbY,aAAa,EAAEA,aAAc;MAC7BD,UAAU,EAAEA;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF5B,OAAA,CAACP,KAAK;MAAC2B,UAAU,EAAEA,UAAW;MAACX,KAAK,EAAEA;IAAM;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC/C,CAAC;AAEP;AAACxB,EAAA,CAxCuBD,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}