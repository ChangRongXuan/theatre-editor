{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport studio from '@theatre/studio';\nimport { useLayoutEffect, useMemo, useState } from 'react';\nimport useDrag from './useDrag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nstudio.initialize();\nconst boxObjectConfig = {\n  x: 0,\n  y: 0\n};\nconst Box = _ref => {\n  _s();\n  let {\n    id,\n    sheet,\n    selectedObject\n  } = _ref;\n  // This is cheap to call and always returns the same value, so no need for useMemo()\n  const obj = sheet.object(id, boxObjectConfig);\n  const isSelected = selectedObject === obj;\n  const [pos, setPos] = useState({\n    x: 0,\n    y: 0\n  });\n  useLayoutEffect(() => {\n    const unsubscribeFromChanges = obj.onValuesChange(newValues => {\n      setPos(newValues);\n    });\n    return unsubscribeFromChanges;\n  }, [id, obj]);\n  const [divRef, setDivRef] = useState(null);\n  const dragOpts = useMemo(() => {\n    let scrub;\n    let initial;\n    let firstOnDragCalled = false;\n    return {\n      onDragStart() {\n        scrub = studio.scrub();\n        initial = obj.value;\n        firstOnDragCalled = false;\n      },\n      onDrag(x, y) {\n        if (!firstOnDragCalled) {\n          studio.setSelection([obj]);\n          firstOnDragCalled = true;\n        }\n        scrub.capture(_ref2 => {\n          let {\n            set\n          } = _ref2;\n          set(obj.props, {\n            x: x + initial.x,\n            y: y + initial.y\n          });\n        });\n      },\n      onDragEnd(dragHappened) {\n        if (dragHappened) {\n          scrub.commit();\n        } else {\n          scrub.discard();\n        }\n      },\n      lockCursorTo: 'move'\n    };\n  }, []);\n  useDrag(divRef, dragOpts);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => {\n      studio.setSelection([obj]);\n    },\n    ref: setDivRef,\n    style: {\n      width: 100,\n      height: 100,\n      background: 'gray',\n      position: 'absolute',\n      left: pos.x + 'px',\n      top: pos.y + 'px',\n      boxSizing: 'border-box',\n      border: isSelected ? '1px solid #5a92fa' : '1px solid transparent'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Box, \"cx3WynS9D5pKfWwXWDZrX/u0PLI=\", false, function () {\n  return [useDrag];\n});\n_c = Box;\nlet lastBoxId = 1;\nconst App = _ref3 => {\n  _s2();\n  let {\n    project\n  } = _ref3;\n  const [boxes, setBoxes] = useState(['0', '1']);\n\n  // This is cheap to call and always returns the same value, so no need for useMemo()\n  const sheet = project.sheet('Scene', 'default');\n  const [selection, _setSelection] = useState([]);\n  useLayoutEffect(() => {\n    return studio.onSelectionChange(newSelection => {\n      _setSelection(newSelection);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      background: '#575757'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setBoxes(boxes => [...boxes, String(++lastBoxId)]);\n      },\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), boxes.map(id => /*#__PURE__*/_jsxDEV(Box, {\n      id: id,\n      sheet: sheet,\n      selectedObject: selection[0]\n    }, 'box' + id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"QvPZblcjan8kXyWtsNc6EsldaK4=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["studio","useLayoutEffect","useMemo","useState","useDrag","jsxDEV","_jsxDEV","initialize","boxObjectConfig","x","y","Box","_ref","_s","id","sheet","selectedObject","obj","object","isSelected","pos","setPos","unsubscribeFromChanges","onValuesChange","newValues","divRef","setDivRef","dragOpts","scrub","initial","firstOnDragCalled","onDragStart","value","onDrag","setSelection","capture","_ref2","set","props","onDragEnd","dragHappened","commit","discard","lockCursorTo","onClick","ref","style","width","height","background","position","left","top","boxSizing","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","lastBoxId","App","_ref3","_s2","project","boxes","setBoxes","selection","_setSelection","onSelectionChange","newSelection","right","bottom","children","String","map","_c2","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/App.js"],"sourcesContent":["import studio from '@theatre/studio'\nimport {useLayoutEffect, useMemo, useState} from 'react'\nimport useDrag from './useDrag'\n\nstudio.initialize()\n\nconst boxObjectConfig = {\n  x: 0,\n  y: 0,\n}\n\nconst Box = ({id, sheet, selectedObject}) => {\n  // This is cheap to call and always returns the same value, so no need for useMemo()\n  const obj = sheet.object(id, boxObjectConfig)\n\n  const isSelected = selectedObject === obj\n\n  const [pos, setPos] = useState({x: 0, y: 0})\n\n  useLayoutEffect(() => {\n    const unsubscribeFromChanges = obj.onValuesChange((newValues) => {\n      setPos(newValues)\n    })\n    return unsubscribeFromChanges\n  }, [id, obj])\n\n  const [divRef, setDivRef] = useState(null)\n\n  const dragOpts = useMemo(() => {\n    let scrub\n    let initial\n    let firstOnDragCalled = false\n    return {\n      onDragStart() {\n        scrub = studio.scrub()\n        initial = obj.value\n        firstOnDragCalled = false\n      },\n      onDrag(x, y) {\n        if (!firstOnDragCalled) {\n          studio.setSelection([obj])\n          firstOnDragCalled = true\n        }\n        scrub.capture(({set}) => {\n          set(obj.props, {x: x + initial.x, y: y + initial.y})\n        })\n      },\n      onDragEnd(dragHappened) {\n        if (dragHappened) {\n          scrub.commit()\n        } else {\n          scrub.discard()\n        }\n      },\n      lockCursorTo: 'move',\n    }\n  }, [])\n\n  useDrag(divRef, dragOpts)\n\n  return (\n    <div\n      onClick={() => {\n        studio.setSelection([obj])\n      }}\n      ref={setDivRef}\n      style={{\n        width: 100,\n        height: 100,\n        background: 'gray',\n        position: 'absolute',\n        left: pos.x + 'px',\n        top: pos.y + 'px',\n        boxSizing: 'border-box',\n        border: isSelected ? '1px solid #5a92fa' : '1px solid transparent',\n      }}\n    ></div>\n  )\n}\n\nlet lastBoxId = 1\n\nconst App = ({project}) => {\n  const [boxes, setBoxes] = useState(['0', '1'])\n\n  // This is cheap to call and always returns the same value, so no need for useMemo()\n  const sheet = project.sheet('Scene', 'default')\n  const [selection, _setSelection] = useState([])\n\n  useLayoutEffect(() => {\n    return studio.onSelectionChange((newSelection) => {\n      _setSelection(newSelection)\n    })\n  })\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        background: '#575757',\n      }}\n    >\n      <button\n        onClick={() => {\n          setBoxes((boxes) => [...boxes, String(++lastBoxId)])\n        }}\n      >\n        Add\n      </button>\n      {boxes.map((id) => (\n        <Box\n          key={'box' + id}\n          id={id}\n          sheet={sheet}\n          selectedObject={selection[0]}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}