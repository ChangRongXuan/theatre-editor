{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/page/demo-video.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getProject } from '@theatre/core';\nimport { defaultFontStyle, defaultImageStyle } from '../components/shared-style';\nimport { renderFontObject, renderImageObject } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n`;\nconst FontElement = styled.div`\n  ${defaultFontStyle}\n`;\nconst ImageElement = styled.div`\n  ${defaultImageStyle}\n`;\nexport default function DemoVideo() {\n  _s();\n  const project = getProject('Project', {});\n  const sheet = project.sheet('Scene', 'default');\n  project.ready.then(() => sheet.sequence.play({\n    iterationCount: Infinity\n  }));\n\n  // ---------------------------\n\n  const [storedData, setStoredData] = useState([]); // get data in local-storage\n\n  useEffect(() => {\n    const elements = localStorage.getItem('theatre-data');\n    if (elements) {\n      setStoredData(JSON.parse(elements));\n    }\n  }, []);\n  useEffect(() => {\n    if (storedData.length > 0) {\n      renderFontObject(storedData, sheet);\n      renderImageObject(storedData, sheet);\n    }\n  }, [storedData]);\n\n  // ---------------------------\n\n  // const fontElements = storedData\n  //   .filter((data) => data.type === 'FONT')\n  //   .map((data, index) => {\n  //     return (\n  //       <FontElement key={index} id={data.id}>\n  //         {data.content}\n  //       </FontElement>\n  //     );\n  //   });\n\n  // const imageElements = storedData\n  //   .filter((data) => data.type === 'IMAGE')\n  //   .map((data, index) => {\n  //     return (\n  //       <ImageElement\n  //         key={index}\n  //         id={data.id}\n  //         style={{ backgroundImage: `url(${data.url})` }}\n  //       />\n  //     );\n  //   });\n\n  return /*#__PURE__*/_jsxDEV(Stage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n}\n_s(DemoVideo, \"3BWFAgJBhjvuMRyDP6l5VsmCKIE=\");\n_c = DemoVideo;\nvar _c;\n$RefreshReg$(_c, \"DemoVideo\");","map":{"version":3,"names":["useState","useEffect","styled","getProject","defaultFontStyle","defaultImageStyle","renderFontObject","renderImageObject","jsxDEV","_jsxDEV","Wrapper","div","FontElement","ImageElement","DemoVideo","_s","project","sheet","ready","then","sequence","play","iterationCount","Infinity","storedData","setStoredData","elements","localStorage","getItem","JSON","parse","length","Stage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/page/demo-video.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getProject } from '@theatre/core';\nimport {\n  defaultFontStyle,\n  defaultImageStyle,\n} from '../components/shared-style';\nimport { renderFontObject, renderImageObject } from '../utils';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n`;\n\nconst FontElement = styled.div`\n  ${defaultFontStyle}\n`;\n\nconst ImageElement = styled.div`\n  ${defaultImageStyle}\n`;\n\nexport default function DemoVideo() {\n  const project = getProject('Project', {});\n  const sheet = project.sheet('Scene', 'default');\n\n  project.ready.then(() =>\n    sheet.sequence.play({\n      iterationCount: Infinity,\n    })\n  );\n\n  // ---------------------------\n\n  const [storedData, setStoredData] = useState([]); // get data in local-storage\n\n  useEffect(() => {\n    const elements = localStorage.getItem('theatre-data');\n    if (elements) {\n      setStoredData(JSON.parse(elements));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedData.length > 0) {\n      renderFontObject(storedData, sheet);\n      renderImageObject(storedData, sheet);\n    }\n  }, [storedData]);\n\n  // ---------------------------\n\n  // const fontElements = storedData\n  //   .filter((data) => data.type === 'FONT')\n  //   .map((data, index) => {\n  //     return (\n  //       <FontElement key={index} id={data.id}>\n  //         {data.content}\n  //       </FontElement>\n  //     );\n  //   });\n\n  // const imageElements = storedData\n  //   .filter((data) => data.type === 'IMAGE')\n  //   .map((data, index) => {\n  //     return (\n  //       <ImageElement\n  //         key={index}\n  //         id={data.id}\n  //         style={{ backgroundImage: `url(${data.url})` }}\n  //       />\n  //     );\n  //   });\n\n  return <Stage />;\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SACEC,gBAAgB,EAChBC,iBAAiB,QACZ,4BAA4B;AACnC,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,OAAO,GAAGR,MAAM,CAACS,GAAI;AAC3B;AACA;AACA;AACA,CAAC;AAED,MAAMC,WAAW,GAAGV,MAAM,CAACS,GAAI;AAC/B,IAAIP,gBAAiB;AACrB,CAAC;AAED,MAAMS,YAAY,GAAGX,MAAM,CAACS,GAAI;AAChC,IAAIN,iBAAkB;AACtB,CAAC;AAED,eAAe,SAASS,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAMC,OAAO,GAAGb,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;EACzC,MAAMc,KAAK,GAAGD,OAAO,CAACC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC;EAE/CD,OAAO,CAACE,KAAK,CAACC,IAAI,CAAC,MACjBF,KAAK,CAACG,QAAQ,CAACC,IAAI,CAAC;IAClBC,cAAc,EAAEC;EAClB,CAAC,CACH,CAAC;;EAED;;EAEA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMyB,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACrD,IAAIF,QAAQ,EAAE;MACZD,aAAa,CAACI,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;EAENzB,SAAS,CAAC,MAAM;IACd,IAAIuB,UAAU,CAACO,MAAM,GAAG,CAAC,EAAE;MACzBzB,gBAAgB,CAACkB,UAAU,EAAEP,KAAK,CAAC;MACnCV,iBAAiB,CAACiB,UAAU,EAAEP,KAAK,CAAC;IACtC;EACF,CAAC,EAAE,CAACO,UAAU,CAAC,CAAC;;EAEhB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOf,OAAA,CAACuB,KAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClB;AAACrB,EAAA,CArDuBD,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}