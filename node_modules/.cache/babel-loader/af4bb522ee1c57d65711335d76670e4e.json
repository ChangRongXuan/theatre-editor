{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/page/playground.js\",\n  _s = $RefreshSig$();\nimport studio from '@theatre/studio';\nimport { useState, useEffect } from 'react';\nimport Stage from '../components/stage';\nimport ControlPanel from '../components/control-panel';\nimport { getProject } from '@theatre/core';\nimport { renderFontObject, renderImageObject } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Playground() {\n  _s();\n  studio.initialize();\n  studio.ui.restore();\n  const project = getProject('Project', {});\n  const sheet = project.sheet('Scene', 'default');\n  project.ready.then(() => sheet.sequence.pause());\n\n  // ---------------------------\n\n  const [storedData, setStoredData] = useState([]); // get data in local-storage\n\n  useEffect(() => {\n    const elements = localStorage.getItem('theatre-data');\n    if (elements) {\n      setStoredData(JSON.parse(elements));\n    }\n    const animate = localStorage.getItem('theatre-0.4.persistent');\n    console.log('animate', animate);\n    console.log('detail', animate.historic);\n  }, []);\n  useEffect(() => {\n    if (storedData.length > 0) {\n      renderFontObject(storedData, sheet);\n      renderImageObject(storedData, sheet);\n    }\n  }, [storedData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n      sheet: sheet,\n      setStoredData: setStoredData,\n      storedData: storedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      storedData: storedData,\n      sheet: sheet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Playground, \"3BWFAgJBhjvuMRyDP6l5VsmCKIE=\");\n_c = Playground;\nvar _c;\n$RefreshReg$(_c, \"Playground\");","map":{"version":3,"names":["studio","useState","useEffect","Stage","ControlPanel","getProject","renderFontObject","renderImageObject","jsxDEV","_jsxDEV","Fragment","_Fragment","Playground","_s","initialize","ui","restore","project","sheet","ready","then","sequence","pause","storedData","setStoredData","elements","localStorage","getItem","JSON","parse","animate","console","log","historic","length","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/page/playground.js"],"sourcesContent":["import studio from '@theatre/studio';\nimport { useState, useEffect } from 'react';\nimport Stage from '../components/stage';\nimport ControlPanel from '../components/control-panel';\nimport { getProject } from '@theatre/core';\nimport { renderFontObject, renderImageObject } from '../utils';\n\nexport default function Playground() {\n  studio.initialize();\n  studio.ui.restore();\n  const project = getProject('Project', {});\n  const sheet = project.sheet('Scene', 'default');\n  project.ready.then(() => sheet.sequence.pause());\n\n  // ---------------------------\n\n  const [storedData, setStoredData] = useState([]); // get data in local-storage\n\n  useEffect(() => {\n    const elements = localStorage.getItem('theatre-data');\n    if (elements) {\n      setStoredData(JSON.parse(elements));\n    }\n\n    const animate = localStorage.getItem('theatre-0.4.persistent');\n\n    console.log('animate', animate);\n    console.log('detail', animate.historic);\n  }, []);\n\n  useEffect(() => {\n    if (storedData.length > 0) {\n      renderFontObject(storedData, sheet);\n      renderImageObject(storedData, sheet);\n    }\n  }, [storedData]);\n\n  return (\n    <>\n      <ControlPanel\n        sheet={sheet}\n        setStoredData={setStoredData}\n        storedData={storedData}\n      />\n      <Stage storedData={storedData} sheet={sheet} />\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,iBAAiB;AACpC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,YAAY,MAAM,6BAA6B;AACtD,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/D,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnCb,MAAM,CAACc,UAAU,CAAC,CAAC;EACnBd,MAAM,CAACe,EAAE,CAACC,OAAO,CAAC,CAAC;EACnB,MAAMC,OAAO,GAAGZ,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;EACzC,MAAMa,KAAK,GAAGD,OAAO,CAACC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC;EAC/CD,OAAO,CAACE,KAAK,CAACC,IAAI,CAAC,MAAMF,KAAK,CAACG,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;;EAEhD;;EAEA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMuB,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACrD,IAAIF,QAAQ,EAAE;MACZD,aAAa,CAACI,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,CAAC;IACrC;IAEA,MAAMK,OAAO,GAAGJ,YAAY,CAACC,OAAO,CAAC,wBAAwB,CAAC;IAE9DI,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC/BC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,OAAO,CAACG,QAAQ,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN/B,SAAS,CAAC,MAAM;IACd,IAAIqB,UAAU,CAACW,MAAM,GAAG,CAAC,EAAE;MACzB5B,gBAAgB,CAACiB,UAAU,EAAEL,KAAK,CAAC;MACnCX,iBAAiB,CAACgB,UAAU,EAAEL,KAAK,CAAC;IACtC;EACF,CAAC,EAAE,CAACK,UAAU,CAAC,CAAC;EAEhB,oBACEd,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBACE1B,OAAA,CAACL,YAAY;MACXc,KAAK,EAAEA,KAAM;MACbM,aAAa,EAAEA,aAAc;MAC7BD,UAAU,EAAEA;IAAW;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF9B,OAAA,CAACN,KAAK;MAACoB,UAAU,EAAEA,UAAW;MAACL,KAAK,EAAEA;IAAM;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC/C,CAAC;AAEP;AAAC1B,EAAA,CAxCuBD,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}