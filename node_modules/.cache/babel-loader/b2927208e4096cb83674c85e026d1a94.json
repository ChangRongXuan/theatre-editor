{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/components/playground-stage.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { initialConfig } from '../constants';\nimport studio from '@theatre/studio';\nimport { defaultFontStyle, defaultImageStyle } from './shared-style/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log('defaultFontStyle', defaultFontStyle);\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n`;\n_c = Wrapper;\nconst FontElement = styled.div`\n  ${defaultFontStyle}\n`;\n_c2 = FontElement;\nconst ImageElement = styled.div`\n  ${defaultImageStyle}\n`;\n\n// 如何讓透過 local-storage 裡 render 的資料可以被選取？\n// 注意：但純 render，要被轉換成 embedded 的不需要\n_c3 = ImageElement;\nexport default function PlaygroundStage(_ref) {\n  let {\n    storedData,\n    sheet\n  } = _ref;\n  const fontElements = storedData.filter(data => data.type === 'FONT').map((data, index) => {\n    return /*#__PURE__*/_jsxDEV(FontElement, {\n      id: data.id,\n      onClick: () => {\n        const obj = sheet.object(data.id, initialConfig.FONT);\n        studio.setSelection([obj]);\n      },\n      children: data.content\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this);\n  });\n  const imageElements = storedData.filter(data => data.type === 'IMAGE').map((data, index) => {\n    const style = {\n      backgroundImage: `url(${data.url})`\n    };\n    return /*#__PURE__*/_jsxDEV(ImageElement, {\n      id: data.id,\n      style: style\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 14\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    id: \"theatre-stage\",\n    children: [fontElements, imageElements]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_c4 = PlaygroundStage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"FontElement\");\n$RefreshReg$(_c3, \"ImageElement\");\n$RefreshReg$(_c4, \"PlaygroundStage\");","map":{"version":3,"names":["React","styled","initialConfig","studio","defaultFontStyle","defaultImageStyle","jsxDEV","_jsxDEV","console","log","Wrapper","div","_c","FontElement","_c2","ImageElement","_c3","PlaygroundStage","_ref","storedData","sheet","fontElements","filter","data","type","map","index","id","onClick","obj","object","FONT","setSelection","children","content","fileName","_jsxFileName","lineNumber","columnNumber","imageElements","style","backgroundImage","url","_c4","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/components/playground-stage.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { initialConfig } from '../constants';\nimport studio from '@theatre/studio';\nimport { defaultFontStyle, defaultImageStyle } from './shared-style/index';\n\nconsole.log('defaultFontStyle', defaultFontStyle);\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n`;\n\nconst FontElement = styled.div`\n  ${defaultFontStyle}\n`;\n\nconst ImageElement = styled.div`\n  ${defaultImageStyle}\n`;\n\n// 如何讓透過 local-storage 裡 render 的資料可以被選取？\n// 注意：但純 render，要被轉換成 embedded 的不需要\nexport default function PlaygroundStage({ storedData, sheet }) {\n  const fontElements = storedData\n    .filter((data) => data.type === 'FONT')\n    .map((data, index) => {\n      return (\n        <FontElement\n          key={index}\n          id={data.id}\n          onClick={() => {\n            const obj = sheet.object(data.id, initialConfig.FONT);\n            studio.setSelection([obj]);\n          }}\n        >\n          {data.content}\n        </FontElement>\n      );\n    });\n\n  const imageElements = storedData\n    .filter((data) => data.type === 'IMAGE')\n    .map((data, index) => {\n      const style = { backgroundImage: `url(${data.url})` };\n      return <ImageElement key={index} id={data.id} style={style} />;\n    });\n\n  return (\n    <Wrapper id='theatre-stage'>\n      {fontElements}\n      {imageElements}\n    </Wrapper>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,aAAa,QAAQ,cAAc;AAC5C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3EC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEL,gBAAgB,CAAC;AAEjD,MAAMM,OAAO,GAAGT,MAAM,CAACU,GAAI;AAC3B;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAJIF,OAAO;AAMb,MAAMG,WAAW,GAAGZ,MAAM,CAACU,GAAI;AAC/B,IAAIP,gBAAiB;AACrB,CAAC;AAACU,GAAA,GAFID,WAAW;AAIjB,MAAME,YAAY,GAAGd,MAAM,CAACU,GAAI;AAChC,IAAIN,iBAAkB;AACtB,CAAC;;AAED;AACA;AAAAW,GAAA,GALMD,YAAY;AAMlB,eAAe,SAASE,eAAeA,CAAAC,IAAA,EAAwB;EAAA,IAAvB;IAAEC,UAAU;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC3D,MAAMG,YAAY,GAAGF,UAAU,CAC5BG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,MAAM,CAAC,CACtCC,GAAG,CAAC,CAACF,IAAI,EAAEG,KAAK,KAAK;IACpB,oBACEnB,OAAA,CAACM,WAAW;MAEVc,EAAE,EAAEJ,IAAI,CAACI,EAAG;MACZC,OAAO,EAAEA,CAAA,KAAM;QACb,MAAMC,GAAG,GAAGT,KAAK,CAACU,MAAM,CAACP,IAAI,CAACI,EAAE,EAAEzB,aAAa,CAAC6B,IAAI,CAAC;QACrD5B,MAAM,CAAC6B,YAAY,CAAC,CAACH,GAAG,CAAC,CAAC;MAC5B,CAAE;MAAAI,QAAA,EAEDV,IAAI,CAACW;IAAO,GAPRR,KAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQC,CAAC;EAElB,CAAC,CAAC;EAEJ,MAAMC,aAAa,GAAGpB,UAAU,CAC7BG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,OAAO,CAAC,CACvCC,GAAG,CAAC,CAACF,IAAI,EAAEG,KAAK,KAAK;IACpB,MAAMc,KAAK,GAAG;MAAEC,eAAe,EAAG,OAAMlB,IAAI,CAACmB,GAAI;IAAG,CAAC;IACrD,oBAAOnC,OAAA,CAACQ,YAAY;MAAaY,EAAE,EAAEJ,IAAI,CAACI,EAAG;MAACa,KAAK,EAAEA;IAAM,GAAjCd,KAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA8B,CAAC;EAChE,CAAC,CAAC;EAEJ,oBACE/B,OAAA,CAACG,OAAO;IAACiB,EAAE,EAAC,eAAe;IAAAM,QAAA,GACxBZ,YAAY,EACZkB,aAAa;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd;AAACK,GAAA,GA/BuB1B,eAAe;AAAA,IAAAL,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAAhC,EAAA;AAAAgC,YAAA,CAAA9B,GAAA;AAAA8B,YAAA,CAAA5B,GAAA;AAAA4B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}