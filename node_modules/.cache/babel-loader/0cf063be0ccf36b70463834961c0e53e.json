{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/components/stage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\nimport FontElement from './elements/font';\nimport ImageElement from './elements/image';\nimport BackgroundElement from './elements/background';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  margin: auto;\n`;\n_c = Wrapper;\nexport default function Stage(_ref) {\n  _s();\n  let {\n    objData,\n    sheet,\n    stageWidth,\n    draggable,\n    setTheatreLoading\n  } = _ref;\n  // 這段測試用---------------------------------\n\n  const [allImagesLoaded, setAllImagesLoaded] = useState(false);\n  useEffect(() => {\n    // Check if all images are loaded after the component mounts\n    checkAllImagesLoaded();\n  }, []); // Empty dependency array ensures this runs only once after the component mounts\n\n  const checkAllImagesLoaded = () => {\n    const images = document.querySelectorAll('img');\n    let allLoaded = true;\n    images.forEach(img => {\n      if (!img.complete || img.naturalWidth === 0) {\n        allLoaded = false;\n      }\n    });\n    setAllImagesLoaded(allLoaded);\n  };\n  const fontElements = objData.filter(data => data.type === 'FONT').map(data => {\n    return /*#__PURE__*/_jsxDEV(FontElement, {\n      id: data.id,\n      sheet: sheet,\n      stageWidth: stageWidth,\n      draggable: draggable\n    }, 'font' + data.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this);\n  });\n  const imageElements = objData.filter(data => data.type === 'IMAGE').map(data => {\n    return /*#__PURE__*/_jsxDEV(ImageElement, {\n      id: data.id,\n      sheet: sheet,\n      stageWidth: stageWidth,\n      draggable: draggable\n    }, 'image' + data.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this);\n  });\n  const bgElements = objData.filter(data => data.type === 'BACKGROUND').map(data => {\n    return /*#__PURE__*/_jsxDEV(BackgroundElement, {\n      id: data.id,\n      sheet: sheet,\n      stageWidth: stageWidth,\n      draggable: draggable\n    }, 'background' + data.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    id: \"theatre-stage\",\n    children: [fontElements, imageElements, bgElements, allImagesLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u6240\\u6709\\u56FE\\u7247\\u52A0\\u8F7D\\u5B8C\\u6210\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Stage, \"sGbnU3WRu5sE0k59Y+pl602PAjg=\");\n_c2 = Stage;\nvar _c, _c2;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Stage\");","map":{"version":3,"names":["React","styled","FontElement","ImageElement","BackgroundElement","jsxDEV","_jsxDEV","Wrapper","div","_c","Stage","_ref","_s","objData","sheet","stageWidth","draggable","setTheatreLoading","allImagesLoaded","setAllImagesLoaded","useState","useEffect","checkAllImagesLoaded","images","document","querySelectorAll","allLoaded","forEach","img","complete","naturalWidth","fontElements","filter","data","type","map","id","fileName","_jsxFileName","lineNumber","columnNumber","imageElements","bgElements","children","_c2","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/components/stage.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport FontElement from './elements/font';\nimport ImageElement from './elements/image';\nimport BackgroundElement from './elements/background';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  overflow: hidden;\n  margin: auto;\n`;\n\nexport default function Stage({\n  objData,\n  sheet,\n  stageWidth,\n  draggable,\n  setTheatreLoading,\n}) {\n  // 這段測試用---------------------------------\n\n  const [allImagesLoaded, setAllImagesLoaded] = useState(false);\n\n  useEffect(() => {\n    // Check if all images are loaded after the component mounts\n    checkAllImagesLoaded();\n  }, []); // Empty dependency array ensures this runs only once after the component mounts\n\n  const checkAllImagesLoaded = () => {\n    const images = document.querySelectorAll('img');\n    let allLoaded = true;\n\n    images.forEach((img) => {\n      if (!img.complete || img.naturalWidth === 0) {\n        allLoaded = false;\n      }\n    });\n\n    setAllImagesLoaded(allLoaded);\n  };\n\n  const fontElements = objData\n    .filter((data) => data.type === 'FONT')\n    .map((data) => {\n      return (\n        <FontElement\n          key={'font' + data.id}\n          id={data.id}\n          sheet={sheet}\n          stageWidth={stageWidth}\n          draggable={draggable}\n        />\n      );\n    });\n\n  const imageElements = objData\n    .filter((data) => data.type === 'IMAGE')\n    .map((data) => {\n      return (\n        <ImageElement\n          key={'image' + data.id}\n          id={data.id}\n          sheet={sheet}\n          stageWidth={stageWidth}\n          draggable={draggable}\n        />\n      );\n    });\n\n  const bgElements = objData\n    .filter((data) => data.type === 'BACKGROUND')\n    .map((data) => {\n      return (\n        <BackgroundElement\n          key={'background' + data.id}\n          id={data.id}\n          sheet={sheet}\n          stageWidth={stageWidth}\n          draggable={draggable}\n        />\n      );\n    });\n\n  return (\n    <Wrapper id='theatre-stage'>\n      {fontElements}\n      {imageElements}\n      {bgElements}\n      {allImagesLoaded && <div>所有图片加载完成</div>}\n    </Wrapper>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}