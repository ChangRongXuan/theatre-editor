{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/App.js\",\n  _s = $RefreshSig$();\nimport studio from '@theatre/studio';\nimport { useLayoutEffect, useMemo, useState } from 'react';\nimport useDrag from './useDrag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nstudio.initialize();\nconst boxObjectConfig = {\n  x: 0,\n  y: 0\n};\nconst Box = _ref => {\n  _s();\n  let {\n    id,\n    sheet,\n    selectedObject\n  } = _ref;\n  // This is cheap to call and always returns the same value, so no need for useMemo()\n  const obj = sheet.object(id, boxObjectConfig);\n  const isSelected = selectedObject === obj;\n  const [pos, setPos] = useState({\n    x: 0,\n    y: 0\n  });\n  useLayoutEffect(() => {\n    const unsubscribeFromChanges = obj.onValuesChange(newValues => {\n      setPos(newValues);\n    });\n    return unsubscribeFromChanges;\n  }, [id, obj]);\n  const [divRef, setDivRef] = useState(null);\n  const dragOpts = useMemo(() => {\n    let scrub;\n    let initial;\n    let firstOnDragCalled = false;\n    return {\n      onDragStart() {\n        scrub = studio.scrub();\n        initial = obj.value;\n        firstOnDragCalled = false;\n      },\n      onDrag(x, y) {\n        if (!firstOnDragCalled) {\n          studio.setSelection([obj]);\n          firstOnDragCalled = true;\n        }\n        scrub.capture(_ref2 => {\n          let {\n            set\n          } = _ref2;\n          set(obj.props, {\n            x: x + initial.x,\n            y: y + initial.y\n          });\n        });\n      },\n      onDragEnd(dragHappened) {\n        if (dragHappened) {\n          scrub.commit();\n        } else {\n          scrub.discard();\n        }\n      },\n      lockCursorTo: 'move'\n    };\n  }, []);\n  useDrag(divRef, dragOpts);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => {\n      studio.setSelection([obj]);\n    },\n    ref: setDivRef,\n    style: {\n      width: 100,\n      height: 100,\n      background: 'gray',\n      position: 'absolute',\n      left: pos.x + 'px',\n      top: pos.y + 'px',\n      boxSizing: 'border-box',\n      border: isSelected ? '1px solid #5a92fa' : '1px solid transparent'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Box, \"Kr7Fi5ZyobxC+mKHP86Qd4DKVo4=\", false, function () {\n  return [useDrag];\n});\n_c = Box;\nlet lastBoxId = 1;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["studio","useLayoutEffect","useMemo","useState","useDrag","jsxDEV","_jsxDEV","initialize","boxObjectConfig","x","y","Box","_ref","_s","id","sheet","selectedObject","obj","object","isSelected","pos","setPos","unsubscribeFromChanges","onValuesChange","newValues","divRef","setDivRef","dragOpts","scrub","initial","firstOnDragCalled","onDragStart","value","onDrag","setSelection","capture","_ref2","set","props","onDragEnd","dragHappened","commit","discard","lockCursorTo","onClick","ref","style","width","height","background","position","left","top","boxSizing","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","lastBoxId","App","_c2","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/App.js"],"sourcesContent":["import studio from '@theatre/studio';\nimport { useLayoutEffect, useMemo, useState } from 'react';\nimport useDrag from './useDrag';\n\nstudio.initialize();\n\nconst boxObjectConfig = {\n  x: 0,\n  y: 0,\n};\n\nconst Box = ({ id, sheet, selectedObject }) => {\n  // This is cheap to call and always returns the same value, so no need for useMemo()\n  const obj = sheet.object(id, boxObjectConfig);\n\n  const isSelected = selectedObject === obj;\n\n  const [pos, setPos] = useState({ x: 0, y: 0 });\n\n  useLayoutEffect(() => {\n    const unsubscribeFromChanges = obj.onValuesChange((newValues) => {\n      setPos(newValues);\n    });\n    return unsubscribeFromChanges;\n  }, [id, obj]);\n\n  const [divRef, setDivRef] = useState(null);\n\n  const dragOpts = useMemo(() => {\n    let scrub;\n    let initial;\n    let firstOnDragCalled = false;\n    return {\n      onDragStart() {\n        scrub = studio.scrub();\n        initial = obj.value;\n        firstOnDragCalled = false;\n      },\n      onDrag(x, y) {\n        if (!firstOnDragCalled) {\n          studio.setSelection([obj]);\n          firstOnDragCalled = true;\n        }\n        scrub.capture(({ set }) => {\n          set(obj.props, { x: x + initial.x, y: y + initial.y });\n        });\n      },\n      onDragEnd(dragHappened) {\n        if (dragHappened) {\n          scrub.commit();\n        } else {\n          scrub.discard();\n        }\n      },\n      lockCursorTo: 'move',\n    };\n  }, []);\n\n  useDrag(divRef, dragOpts);\n\n  return (\n    <div\n      onClick={() => {\n        studio.setSelection([obj]);\n      }}\n      ref={setDivRef}\n      style={{\n        width: 100,\n        height: 100,\n        background: 'gray',\n        position: 'absolute',\n        left: pos.x + 'px',\n        top: pos.y + 'px',\n        boxSizing: 'border-box',\n        border: isSelected ? '1px solid #5a92fa' : '1px solid transparent',\n      }}\n    ></div>\n  );\n};\n\nlet lastBoxId = 1;\n\nconst App = () => {\n  return <div></div>;\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}