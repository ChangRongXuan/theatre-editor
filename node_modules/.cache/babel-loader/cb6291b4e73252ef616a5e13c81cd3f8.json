{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/deepfake-demo/src/embedded.js\",\n  _s = $RefreshSig$();\nimport { parse } from 'node-html-parser';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Block = styled.div`\n  position: relative;\n  img.img-responsive {\n    margin: 0 auto;\n    max-width: 100%;\n    height: auto;\n    display: block;\n  }\n`;\n_c = Block;\nexport default function EmbeddedCode() {\n  _s();\n  const embeddedCode = `\n  <script>\n    (function() {\n      var namespace = '__twreporterEmbeddedData';\n      var pkg = 'scrollable-video';\n      if (typeof window != 'undefined') {\n        if (!window.hasOwnProperty(namespace)) {\n          window[namespace] = {};\n        }\n        if (window[namespace] && !window[namespace].hasOwnProperty(pkg)) {\n          window[namespace][pkg] = [];\n        }\n        if (Array.isArray(window[namespace][pkg])) {\n          var data = {\"video\":{\"sources\":[{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_1280.mp4\",\"width\":1280,\"height\":720},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_1440.mp4\",\"width\":1440,\"height\":810},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_1920.mp4\",\"width\":1920,\"height\":1080},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_mobile_720.mp4\",\"width\":720,\"height\":1080},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_mobile_960.mp4\",\"width\":960,\"height\":1440}]},\"captions\":[{\"text\":\"中國利用大型演習來隱藏其預備開戰的事實。在開戰前 30 天，雖然信號明確，但美國和臺灣對中國的動機跟意圖仍存在很大的不確定性。\",\"time\":2},{\"text\":\"開戰前 14 天，臺灣和美國收到明確的警告，美國派遣航空母艦打擊群往琉球出發、並派出兩個轟炸機中隊去關島，嘗試震懾中國。\",\"time\":6},{\"text\":\"臺灣面對中國的入侵頑強抵抗，美國立即參戰。日本開放美國使用位於它境內的美軍基地，並下令自衛隊在受到攻擊時反擊。\",\"time\":8},{\"text\":\"除了美國和日本以外，臺灣的盟友只有澳洲，澳洲將參加南中國海的戰鬥，而菲律賓則猶豫要不要讓美國使用美軍基地。其他亞洲國家都保持中立。歐洲國家則因中國巨大的經濟實力、和戰場太遠，只會有經濟制裁。\",\"time\":11},{\"text\":\"中國兩棲艦隊有強大的火力，但是岸上部隊登陸速度很慢。在此過程中，船只能停泊在被佔領的陣地之外。\",\"time\":13},{\"text\":\"在中國完成登陸前，臺灣的岸防戰力、美國飛機、美國和日本潛艇不斷發射反艦導彈攻擊中國的兩棲艦隊。\",\"time\":14},{\"text\":\"中國向西太平洋派遣潛艇，阻止美國的水面部隊。\",\"time\":19},{\"text\":\"臺灣空軍被中國壓制，而中國空軍在臺灣享有明顯的制空權，用對地攻擊機和轟炸機阻撓美日的臺灣增援部隊。\",\"time\":23},{\"text\":\"九成的中國兩棲艦隊被催毀，中國只能靠空投和直升機對岸上的部隊補給。10 天後，中國仍無法佔領主要的城市和設施，耗盡補給，陷入僵局。\",\"time\":29},{\"text\":\"在另一次的兵棋推演中，中共成功佔領臺南港。但美國透過空襲阻止它使用臺南港，中國無法將臺南港作為有效陣地，仍靠空投補給。21 天後，中國守不住，陷入僵局。\",\"time\":34},{\"text\":\"結果：陷入對中國不利的僵局。\\u003Cbr\\u003E\\n中國成功登陸，但沒有足夠的兵力對抗臺灣地面部隊；兩棲艦隊耗損率高，在臺灣沒有可用的港口跟機場來讓新的兵力進入。\",\"time\":36},{\"text\":\"補給方面，中國試圖用小型民用船隻代替他失去的大型兩棲航母，但這導致補給大幅下降。臺灣也可能面臨彈藥庫存和補給能力的問題。\",\"time\":39},{\"text\":\"在美國、日本和臺灣的聯合攻擊下，中國戰力逐漸退化。能夠佔領臺灣的港口和機場數量將是影響戰局的關鍵因素，如果能夠成功佔領足夠的機場和港口，中國有機會獲勝；如果不行，中國軍隊最終將會潰敗。\",\"time\":41}],\"appProps\":{\"captionsSetting\":{\"xBoxAlign\":\"left\",\"xPosition\":\"8.7%\",\"yBoxAlign\":\"bottom\",\"yPosition\":\"20px\"},\"captionSetting\":{\"textAlign\":\"right\"},\"secondsPer100vh\":1.5,\"skipLoadLocationRegExp\":\"editor\",\"forcedPreloadVideo\":true,\"gsapVersion\":\"3.5.1\",\"scrollTriggerVersion\":\"3.5.1\",\"pollingTimeout\":700,\"preloadCacheType\":\"force-cache\"},\"theme\":{\"mq\":{\"mobileMaxWidth\":\"767px\"},\"captions\":{\"color\":\"#fff\",\"link\":{\"color\":\"#a67a44\",\"underlineColor\":\"#a67a44\"},\"lineHieght\":\"1.7\",\"mobileLineHeight\":\"1.7\",\"fontStyle\":\"normal\",\"fontWeight\":\"medium\",\"fontSize\":\"22px\",\"mobile\":{\"fontSize\":\"18px\"},\"fontFamily\":\"ff-tisa-web-pro, source-han-sans-traditional, Noto Sans TC, PingFang TC, Apple LiGothic Medium, Roboto, Microsoft JhengHei, Lucida Grande, Lucida Sans Unicode, sans-serif\",\"box\":{\"background\":\"#303030\",\"width\":\"500px\",\"mobileWidth\":\"85%\",\"spanPadding\":\"6px 6px\",\"mobilePadding\":\"12px 12px 14px 18px\"}}},\"uuid\":\"bd60cfdf-a365-4093-817b-d7f992e0d97e\"};\n          window[namespace][pkg].push(data);\n        }\n      }\n    })()\n  </script>\n  <div id=\"bd60cfdf-a365-4093-817b-d7f992e0d97e\"></div>\n  \n  <script type=\"text/javascript\" crossorigin src=\"https://unpkg.com/@twreporter/scrollable-video@1.0.3/dist/main.86a0a5788205961bf35c.bundle.js\"></script>\n`;\n  const embedded = useRef(null);\n\n  // `embeddedCode` is a string, which may includes\n  // multiple script tags and other html tags.\n  // Here we separate script tags and other html tags\n  // by using the isomorphic html parser 'node-html-parser'\n  // into scripts nodes and non-script nodes.\n  //\n  // For non-script nodes we simply put them into dangerouslySetInnerHtml.\n  //\n  // For scripts nodes we only append them on the client side. So we handle scripts\n  // nodes when useEffect is called.\n  // The reasons we don't insert script tags through dangerouslySetInnerHtml:\n  // 1. Since react use setInnerHtml to append the htmlStirng received from\n  //    dangerouslySetInnerHtml, scripts won't be triggered.\n  // 2. Although the setInnerhtml way won't trigger script tags, those script tags\n  //    will still show on the HTML provided from SSR. When the browser parse the\n  //    html it will run those script and produce unexpected behavior.\n  const nodes = useMemo(() => {\n    const ele = parse(`<div id=\"draft-embed\">${embeddedCode}</div>`);\n    const scripts = ele.querySelectorAll('script');\n    scripts.forEach(s => {\n      s.remove();\n    });\n    const nonScripts = ele.querySelectorAll('div#draft-embed > :not(script)');\n    const nonScriptsHtml = nonScripts.reduce((prev, next) => prev + next.toString(), '');\n    return {\n      scripts,\n      nonScripts,\n      nonScriptsHtml\n    };\n  }, [embeddedCode]);\n  const {\n    scripts,\n    nonScriptsHtml\n  } = nodes;\n  useEffect(() => {\n    if (embedded.current) {\n      const node = embedded.current;\n      const fragment = document.createDocumentFragment();\n      scripts.forEach(s => {\n        const scriptEle = document.createElement('script');\n        const attrs = s.attributes;\n        for (const key in attrs) {\n          scriptEle.setAttribute(key, attrs[key]);\n        }\n        scriptEle.text = s.text || '';\n        fragment.appendChild(scriptEle);\n      });\n      node.appendChild(fragment);\n    }\n  }, [scripts]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      hidden: true,\n      disabled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Block, {\n      ref: embedded,\n      dangerouslySetInnerHTML: {\n        __html: nonScriptsHtml\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EmbeddedCode, \"5PMi4KWWJvLUXR9wye+TH5v2/Oc=\");\n_c2 = EmbeddedCode;\nvar _c, _c2;\n$RefreshReg$(_c, \"Block\");\n$RefreshReg$(_c2, \"EmbeddedCode\");","map":{"version":3,"names":["parse","React","useEffect","useMemo","useRef","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","Block","div","_c","EmbeddedCode","_s","embeddedCode","embedded","nodes","ele","scripts","querySelectorAll","forEach","s","remove","nonScripts","nonScriptsHtml","reduce","prev","next","toString","current","node","fragment","document","createDocumentFragment","scriptEle","createElement","attrs","attributes","key","setAttribute","text","appendChild","children","hidden","disabled","fileName","_jsxFileName","lineNumber","columnNumber","ref","dangerouslySetInnerHTML","__html","_c2","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/deepfake-demo/src/embedded.js"],"sourcesContent":["import { parse } from 'node-html-parser';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst Block = styled.div`\n  position: relative;\n  img.img-responsive {\n    margin: 0 auto;\n    max-width: 100%;\n    height: auto;\n    display: block;\n  }\n`;\n\nexport default function EmbeddedCode() {\n  const embeddedCode = `\n  <script>\n    (function() {\n      var namespace = '__twreporterEmbeddedData';\n      var pkg = 'scrollable-video';\n      if (typeof window != 'undefined') {\n        if (!window.hasOwnProperty(namespace)) {\n          window[namespace] = {};\n        }\n        if (window[namespace] && !window[namespace].hasOwnProperty(pkg)) {\n          window[namespace][pkg] = [];\n        }\n        if (Array.isArray(window[namespace][pkg])) {\n          var data = {\"video\":{\"sources\":[{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_1280.mp4\",\"width\":1280,\"height\":720},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_1440.mp4\",\"width\":1440,\"height\":810},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_1920.mp4\",\"width\":1920,\"height\":1080},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_mobile_720.mp4\",\"width\":720,\"height\":1080},{\"type\":\"video\\u002Fmp4\",\"src\":\"https:\\u002F\\u002Fstatics.readr.tw\\u002Fassets\\u002Fvideo\\u002F2023_war\\u002Fwar_ch1_mobile_960.mp4\",\"width\":960,\"height\":1440}]},\"captions\":[{\"text\":\"中國利用大型演習來隱藏其預備開戰的事實。在開戰前 30 天，雖然信號明確，但美國和臺灣對中國的動機跟意圖仍存在很大的不確定性。\",\"time\":2},{\"text\":\"開戰前 14 天，臺灣和美國收到明確的警告，美國派遣航空母艦打擊群往琉球出發、並派出兩個轟炸機中隊去關島，嘗試震懾中國。\",\"time\":6},{\"text\":\"臺灣面對中國的入侵頑強抵抗，美國立即參戰。日本開放美國使用位於它境內的美軍基地，並下令自衛隊在受到攻擊時反擊。\",\"time\":8},{\"text\":\"除了美國和日本以外，臺灣的盟友只有澳洲，澳洲將參加南中國海的戰鬥，而菲律賓則猶豫要不要讓美國使用美軍基地。其他亞洲國家都保持中立。歐洲國家則因中國巨大的經濟實力、和戰場太遠，只會有經濟制裁。\",\"time\":11},{\"text\":\"中國兩棲艦隊有強大的火力，但是岸上部隊登陸速度很慢。在此過程中，船只能停泊在被佔領的陣地之外。\",\"time\":13},{\"text\":\"在中國完成登陸前，臺灣的岸防戰力、美國飛機、美國和日本潛艇不斷發射反艦導彈攻擊中國的兩棲艦隊。\",\"time\":14},{\"text\":\"中國向西太平洋派遣潛艇，阻止美國的水面部隊。\",\"time\":19},{\"text\":\"臺灣空軍被中國壓制，而中國空軍在臺灣享有明顯的制空權，用對地攻擊機和轟炸機阻撓美日的臺灣增援部隊。\",\"time\":23},{\"text\":\"九成的中國兩棲艦隊被催毀，中國只能靠空投和直升機對岸上的部隊補給。10 天後，中國仍無法佔領主要的城市和設施，耗盡補給，陷入僵局。\",\"time\":29},{\"text\":\"在另一次的兵棋推演中，中共成功佔領臺南港。但美國透過空襲阻止它使用臺南港，中國無法將臺南港作為有效陣地，仍靠空投補給。21 天後，中國守不住，陷入僵局。\",\"time\":34},{\"text\":\"結果：陷入對中國不利的僵局。\\u003Cbr\\u003E\\n中國成功登陸，但沒有足夠的兵力對抗臺灣地面部隊；兩棲艦隊耗損率高，在臺灣沒有可用的港口跟機場來讓新的兵力進入。\",\"time\":36},{\"text\":\"補給方面，中國試圖用小型民用船隻代替他失去的大型兩棲航母，但這導致補給大幅下降。臺灣也可能面臨彈藥庫存和補給能力的問題。\",\"time\":39},{\"text\":\"在美國、日本和臺灣的聯合攻擊下，中國戰力逐漸退化。能夠佔領臺灣的港口和機場數量將是影響戰局的關鍵因素，如果能夠成功佔領足夠的機場和港口，中國有機會獲勝；如果不行，中國軍隊最終將會潰敗。\",\"time\":41}],\"appProps\":{\"captionsSetting\":{\"xBoxAlign\":\"left\",\"xPosition\":\"8.7%\",\"yBoxAlign\":\"bottom\",\"yPosition\":\"20px\"},\"captionSetting\":{\"textAlign\":\"right\"},\"secondsPer100vh\":1.5,\"skipLoadLocationRegExp\":\"editor\",\"forcedPreloadVideo\":true,\"gsapVersion\":\"3.5.1\",\"scrollTriggerVersion\":\"3.5.1\",\"pollingTimeout\":700,\"preloadCacheType\":\"force-cache\"},\"theme\":{\"mq\":{\"mobileMaxWidth\":\"767px\"},\"captions\":{\"color\":\"#fff\",\"link\":{\"color\":\"#a67a44\",\"underlineColor\":\"#a67a44\"},\"lineHieght\":\"1.7\",\"mobileLineHeight\":\"1.7\",\"fontStyle\":\"normal\",\"fontWeight\":\"medium\",\"fontSize\":\"22px\",\"mobile\":{\"fontSize\":\"18px\"},\"fontFamily\":\"ff-tisa-web-pro, source-han-sans-traditional, Noto Sans TC, PingFang TC, Apple LiGothic Medium, Roboto, Microsoft JhengHei, Lucida Grande, Lucida Sans Unicode, sans-serif\",\"box\":{\"background\":\"#303030\",\"width\":\"500px\",\"mobileWidth\":\"85%\",\"spanPadding\":\"6px 6px\",\"mobilePadding\":\"12px 12px 14px 18px\"}}},\"uuid\":\"bd60cfdf-a365-4093-817b-d7f992e0d97e\"};\n          window[namespace][pkg].push(data);\n        }\n      }\n    })()\n  </script>\n  <div id=\"bd60cfdf-a365-4093-817b-d7f992e0d97e\"></div>\n  \n  <script type=\"text/javascript\" crossorigin src=\"https://unpkg.com/@twreporter/scrollable-video@1.0.3/dist/main.86a0a5788205961bf35c.bundle.js\"></script>\n`;\n\n  const embedded = useRef(null);\n\n  // `embeddedCode` is a string, which may includes\n  // multiple script tags and other html tags.\n  // Here we separate script tags and other html tags\n  // by using the isomorphic html parser 'node-html-parser'\n  // into scripts nodes and non-script nodes.\n  //\n  // For non-script nodes we simply put them into dangerouslySetInnerHtml.\n  //\n  // For scripts nodes we only append them on the client side. So we handle scripts\n  // nodes when useEffect is called.\n  // The reasons we don't insert script tags through dangerouslySetInnerHtml:\n  // 1. Since react use setInnerHtml to append the htmlStirng received from\n  //    dangerouslySetInnerHtml, scripts won't be triggered.\n  // 2. Although the setInnerhtml way won't trigger script tags, those script tags\n  //    will still show on the HTML provided from SSR. When the browser parse the\n  //    html it will run those script and produce unexpected behavior.\n  const nodes = useMemo(() => {\n    const ele = parse(`<div id=\"draft-embed\">${embeddedCode}</div>`);\n\n    const scripts = ele.querySelectorAll('script');\n    scripts.forEach((s) => {\n      s.remove();\n    });\n    const nonScripts = ele.querySelectorAll('div#draft-embed > :not(script)');\n    const nonScriptsHtml = nonScripts.reduce(\n      (prev, next) => prev + next.toString(),\n      ''\n    );\n\n    return { scripts, nonScripts, nonScriptsHtml };\n  }, [embeddedCode]);\n  const { scripts, nonScriptsHtml } = nodes;\n\n  useEffect(() => {\n    if (embedded.current) {\n      const node = embedded.current;\n\n      const fragment = document.createDocumentFragment();\n\n      scripts.forEach((s) => {\n        const scriptEle = document.createElement('script');\n        const attrs = s.attributes;\n        for (const key in attrs) {\n          scriptEle.setAttribute(key, attrs[key]);\n        }\n        scriptEle.text = s.text || '';\n        fragment.appendChild(scriptEle);\n      });\n\n      node.appendChild(fragment);\n    }\n  }, [scripts]);\n\n  return (\n    <>\n      {\n        // WORKAROUND:\n        // The following `<input>` is to solve [issue 153](https://github.com/mirror-media/openwarehouse-k6/issues/153).\n        // If the emebed code generates `<input>` or `<textarea>` and appends them onto DOM,\n        // and then the generated `<input>` or `<textarea>` will hijack the users' cursors.\n        // It will cause that users could not edit the DraftJS Editor anymore.\n        // The following phony `<input>` is used to prevent the generated `<input>` or `<textare>` from\n        // hijacking the users' cursors.\n      }\n      <input hidden disabled />\n      <Block\n        ref={embedded}\n        dangerouslySetInnerHTML={{\n          __html: nonScriptsHtml,\n        }}\n      />\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}