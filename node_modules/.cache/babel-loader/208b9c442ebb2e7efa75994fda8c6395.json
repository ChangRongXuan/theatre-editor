{"ast":null,"code":"import boolbase from \"boolbase\";\n/**\n * Returns a function that checks if an elements index matches the given rule\n * highly optimized to return the fastest solution.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A highly optimized function that returns whether an index matches the nth-check.\n * @example\n *\n * ```js\n * const check = nthCheck.compile([2, 3]);\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n * ```\n */\nexport function compile(parsed) {\n  var a = parsed[0];\n  // Subtract 1 from `b`, to convert from one- to zero-indexed.\n  var b = parsed[1] - 1;\n  /*\n   * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n   * Besides, the specification states that no elements are\n   * matched when `a` and `b` are 0.\n   *\n   * `b < 0` here as we subtracted 1 from `b` above.\n   */\n  if (b < 0 && a <= 0) return boolbase.falseFunc;\n  // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n  if (a === -1) return function (index) {\n    return index <= b;\n  };\n  if (a === 0) return function (index) {\n    return index === b;\n  };\n  // When `b <= 0` and `a === 1`, they match any element.\n  if (a === 1) return b < 0 ? boolbase.trueFunc : function (index) {\n    return index >= b;\n  };\n  /*\n   * Otherwise, modulo can be used to check if there is a match.\n   *\n   * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n   */\n  var absA = Math.abs(a);\n  // Get `b mod a`, + a if this is negative.\n  var bMod = (b % absA + absA) % absA;\n  return a > 1 ? function (index) {\n    return index >= b && index % absA === bMod;\n  } : function (index) {\n    return index <= b && index % absA === bMod;\n  };\n}\n/**\n * Returns a function that produces a monotonously increasing sequence of indices.\n *\n * If the sequence has an end, the returned function will return `null` after\n * the last index in the sequence.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing (2n+3)</caption>\n *\n * ```js\n * const gen = nthCheck.generate([2, 3])\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value (-2n+10)</caption>\n *\n * ```js\n *\n * const gen = nthCheck.generate([-2, 5]);\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */\nexport function generate(parsed) {\n  var a = parsed[0];\n  // Subtract 1 from `b`, to convert from one- to zero-indexed.\n  var b = parsed[1] - 1;\n  var n = 0;\n  // Make sure to always return an increasing sequence\n  if (a < 0) {\n    var aPos = -a;\n    // Get `b mod a`\n    var minValue = (b % aPos + aPos) % aPos;\n    return function () {\n      var val = minValue + aPos * n++;\n      return val > b ? null : val;\n    };\n  }\n  if (a === 0) return b < 0 ?\n  // There are no result — always return `null`\n  function () {\n    return null;\n  } :\n  // Return `b` exactly once\n  function () {\n    return n++ === 0 ? b : null;\n  };\n  if (b < 0) {\n    b += a * Math.ceil(-b / a);\n  }\n  return function () {\n    return a * n++ + b;\n  };\n}","map":{"version":3,"sources":["compile.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,UAAU;AAE/B;;;;;;;;;;;;;;;;;;;AAmBG;AACH,OAAM,SAAU,OAAO,CACnB,MAA8B,EAAA;EAE9B,IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACnB;EACA,IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EAEvB;;;;;;AAMG;EACH,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,QAAQ,CAAC,SAAS;EAE9C;EACA,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,UAAC,KAAK;IAAA,OAAK,KAAK,IAAI,CAAC;EAAA;EAC1C,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,UAAC,KAAK;IAAA,OAAK,KAAK,KAAK,CAAC;EAAA;EAC1C;EACA,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,QAAQ,GAAG,UAAC,KAAK;IAAA,OAAK,KAAK,IAAI,CAAC;EAAA;EAErE;;;;AAIG;EACH,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACxB;EACA,IAAM,IAAI,GAAG,CAAE,CAAC,GAAG,IAAI,GAAI,IAAI,IAAI,IAAI;EAEvC,OAAO,CAAC,GAAG,CAAC,GACN,UAAC,KAAK;IAAA,OAAK,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,KAAK,IAAI;EAAA,IAC9C,UAAC,KAAK;IAAA,OAAK,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,KAAK,IAAI;EAAA;AACxD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BG;AACH,OAAM,SAAU,QAAQ,CAAC,MAA8B,EAAA;EACnD,IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACnB;EACA,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EAErB,IAAI,CAAC,GAAG,CAAC;EAET;EACA,IAAI,CAAC,GAAG,CAAC,EAAE;IACP,IAAM,IAAI,GAAG,CAAC,CAAC;IACf;IACA,IAAM,QAAQ,GAAG,CAAE,CAAC,GAAG,IAAI,GAAI,IAAI,IAAI,IAAI;IAC3C,OAAO,YAAK;MACR,IAAM,GAAG,GAAG,QAAQ,GAAG,IAAI,GAAG,CAAC,EAAE;MAEjC,OAAO,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG;IAC/B,CAAC;EACJ;EAED,IAAI,CAAC,KAAK,CAAC,EACP,OAAO,CAAC,GAAG,CAAC;EACN;EACA;IAAA,OAAM,IAAI;EAAA;EACV;EACA;IAAA,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI;EAAA,CAAC;EAEtC,IAAI,CAAC,GAAG,CAAC,EAAE;IACP,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAED,OAAO;IAAA,OAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;EAAA;AAC5B","sourceRoot":"https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/","sourcesContent":["import boolbase from \"boolbase\";\n/**\n * Returns a function that checks if an elements index matches the given rule\n * highly optimized to return the fastest solution.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A highly optimized function that returns whether an index matches the nth-check.\n * @example\n *\n * ```js\n * const check = nthCheck.compile([2, 3]);\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n * ```\n */\nexport function compile(parsed) {\n    const a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    const b = parsed[1] - 1;\n    /*\n     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n     * Besides, the specification states that no elements are\n     * matched when `a` and `b` are 0.\n     *\n     * `b < 0` here as we subtracted 1 from `b` above.\n     */\n    if (b < 0 && a <= 0)\n        return boolbase.falseFunc;\n    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n    if (a === -1)\n        return (index) => index <= b;\n    if (a === 0)\n        return (index) => index === b;\n    // When `b <= 0` and `a === 1`, they match any element.\n    if (a === 1)\n        return b < 0 ? boolbase.trueFunc : (index) => index >= b;\n    /*\n     * Otherwise, modulo can be used to check if there is a match.\n     *\n     * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n     */\n    const absA = Math.abs(a);\n    // Get `b mod a`, + a if this is negative.\n    const bMod = ((b % absA) + absA) % absA;\n    return a > 1\n        ? (index) => index >= b && index % absA === bMod\n        : (index) => index <= b && index % absA === bMod;\n}\n/**\n * Returns a function that produces a monotonously increasing sequence of indices.\n *\n * If the sequence has an end, the returned function will return `null` after\n * the last index in the sequence.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing (2n+3)</caption>\n *\n * ```js\n * const gen = nthCheck.generate([2, 3])\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value (-2n+10)</caption>\n *\n * ```js\n *\n * const gen = nthCheck.generate([-2, 5]);\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */\nexport function generate(parsed) {\n    const a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    let b = parsed[1] - 1;\n    let n = 0;\n    // Make sure to always return an increasing sequence\n    if (a < 0) {\n        const aPos = -a;\n        // Get `b mod a`\n        const minValue = ((b % aPos) + aPos) % aPos;\n        return () => {\n            const val = minValue + aPos * n++;\n            return val > b ? null : val;\n        };\n    }\n    if (a === 0)\n        return b < 0\n            ? // There are no result — always return `null`\n                () => null\n            : // Return `b` exactly once\n                () => (n++ === 0 ? b : null);\n    if (b < 0) {\n        b += a * Math.ceil(-b / a);\n    }\n    return () => a * n++ + b;\n}\n//# sourceMappingURL=compile.js.map"]},"metadata":{},"sourceType":"module"}